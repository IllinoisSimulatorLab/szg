# Aszgard/MinGW-specific build file for scons

import os
import sys
from szgscons import makeLibName

Import('envDict')

# Use multiple jobs. Can be overridden from command line
# by using e.g. 'scons -j 1' for a single job.
numCPU = int(os.environ.get( 'NUMBER_OF_PROCESSORS', 2 ))
SetOption( 'num_jobs', numCPU )


if 'ASZGARD' in os.environ:
  def aszgardPath( relPath ):
    return os.path.join( os.environ['ASZGARD'], relPath ).replace('\\','/')

  # Exec path offsets from aszgard
  relExecPaths = [
    'bin/MinGW/bin',
    'bin/msys/bin'
  ]
  # Construct absolute exec paths
  execPaths = [aszgardPath( p ) for p in relExecPaths]

  # Create MinGW build environment.
  basicEnv = Environment( ENV={'PATH':execPaths}, tools=['mingw'] )
else:
  # Create MinGW build environment.
  basicEnv = Environment( tools=['mingw'] )


externalDependencies = {
    'language':{
      'external':[]
      },
    'math'    :{
      'external':[]
      },
    'phleet'  :{
      'external':[]
      },
    'barrier'  :{
      'external':[]
      },
    'drivers'  :{
      'external':[]
      },
    'graphics'  :{
      'external':['jpeg']
      },
    'model'  :{
      'external':['jpeg','3ds']
      },
    'sound'  :{
      'external':['fmod','sapi']
      },
    'interaction'  :{
      'external':[]
      },
    'framework'  :{
      'external':['jpeg','3ds','fmod','sapi']
      },
    'utilities'  :{
      'external':['jpeg','3ds','fmod','sapi']
      },
    'demo'  :{
      'external':['jpeg','3ds','fmod','sapi']
      },
    }


pathDict = envDict['paths']
subdirs = envDict['subdirs']

for dirName,subdir in subdirs.iteritems():
  subdir.update( externalDependencies[dirName] )

commonFlags = {
    'LIBPATH':[pathDict['libPath']],
    'LIBS':['kernel32','user32','gdi32','winmm','wsock32'],
    'CCFLAGS':['-O2','-Wall','-W','-Wpointer-arith','-march=i686','-D AR_USE_WIN_32','-D AR_USE_MINGW'],
    'LINKFLAGS':['-static-libgcc','-static-libstdc++','-Wl,-rpath,'+pathDict['binPath'],'-Wl,--enable-stdcall-fixup']
    }

graphicsLibs = {'LIBS':['glu32','opengl32']}

if os.environ.get('SZG_LINKING','STATIC') != 'DYNAMIC':
  commonFlags['CCFLAGS'].append('-D AR_LINKING_STATIC')
else:
  commonFlags['CCFLAGS'].append('-D AR_LINKING_DYNAMIC')

szgEnv = basicEnv.Clone()
bld = Builder( action='ar -r $TARGET $SOURCES', prefix='lib', suffix='.a', src_suffix='.o' )
szgEnv['BUILDERS']['StaticLibrary'] = bld
szgEnv.MergeFlags( envDict['versionFlags'] )
szgEnv.MergeFlags( commonFlags )


############# Detecting libraries ##########################

######## Check and get flags for external dependencies ######

externalFlags = {}

SConscript( 'SConscript.bird', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.evart', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.5dt', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.glut', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.jpeg', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.3ds', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.fmod', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.sapi', exports=['szgEnv','externalFlags'] )

envDict['externalFlags'] = externalFlags

######## Detecting libraries end ############################

szgNoGLEnv = szgEnv.Clone()
szgEnv.MergeFlags( graphicsLibs )

envDict['szgEnv'] = szgEnv
envDict['szgNoGLEnv'] = szgNoGLEnv

