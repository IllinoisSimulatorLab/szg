import os
import sys

Import('envDict')

numCPU = int(os.environ.get( 'NUMBER_OF_PROCESSORS', 2 ))
SetOption( 'num_jobs', numCPU )

# Create standard Linux build environment.
basicEnv = Environment()

pathDict = envDict['paths']

commonFlags = {
    'CPPPATH':[pathDict['includePath']],
    'LIBPATH':[pathDict['libPath']],
    'LIBS':['dl','pthread','m'],
    'CCFLAGS':['-fPIC','-O2','-Wall','-W','-Wpointer-arith','-march=i686','-D AR_USE_LINUX'],
    'LINKFLAGS':['-Wl,-rpath,'+pathDict['binPath']]
    }

if os.environ.get('SZG_LINKING','STATIC') != 'DYNAMIC':
  commonFlags['CCFLAGS'].append('-D AR_LINKING_STATIC')
else:
  commonFlags['CCFLAGS'].append('-D AR_LINKING_DYNAMIC')

szgEnv = basicEnv.Clone()
bld = Builder( action='ar -r $TARGET $SOURCES', prefix='lib', suffix='.a', src_suffix='.o' )
szgEnv['BUILDERS']['StaticLibrary'] = bld
szgEnv.MergeFlags( envDict['versionFlags'] )
szgEnv.MergeFlags( commonFlags )

# Create and install target for locations outside of szg.
szgEnv.Alias( 'install', pathDict['binPath'] )

############# Detecting libraries ##########################

######## Check and get flags for external dependencies ######

externalFlags = {}

SConscript( 'SConscript.glut', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.curses', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.jpeg', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.3ds', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.fmod', exports=['szgEnv','externalFlags'] )

envDict['externalFlags'] = externalFlags

######## Detecting libraries end ############################

def makeLibName( libName ):
  libName = 'ar'+libName.capitalize()
  if os.environ.get( 'SZG_LINKING', 'STATIC' ) != 'DYNAMIC':
    libName += '_static'
  return libName
    
envDict['szgEnv'] = szgEnv

subdirs = {
    'language':{
      'internal':[],
      'external':[]
      },
    'math'    :{
      'internal':['language'],
      'external':[]
      },
    'phleet'  :{
      'internal':['language','math'],
      'external':[]
      },
    'barrier'  :{
      'internal':['language','math','phleet'],
      'external':[]
      },
    'drivers'  :{
      'internal':['language','math','phleet','barrier'],
      'external':[]
      },
    'graphics'  :{
      'internal':['language','math','phleet','barrier'],
      'external':['glut','jpeg']
      },
    'obj'  :{
      'internal':['language','math','phleet','barrier','graphics'],
      'external':['glut','jpeg','3ds']
      },
    'sound'  :{
      'internal':['language','math','phleet','barrier'],
      'external':['fmod']
      },
    'interaction'  :{
      'internal':['language','math','phleet','drivers'],
      'external':[]
      },
    'framework'  :{
      'internal':['language','math','phleet','barrier','drivers','graphics','obj','sound','interaction'],
      'external':['glut','jpeg','3ds','fmod']
      },
    'utilities'  :{
      'internal':['language','math','phleet','barrier','drivers','graphics','obj','sound','interaction','framework'],
      'external':['glut','jpeg','3ds','fmod']
      },
    'demo'  :{
      'internal':['language','math','phleet','barrier','drivers','graphics','obj','sound','interaction','framework'],
      'external':['glut','jpeg','3ds','fmod']
      },
    }

for subdir,depend in subdirs.iteritems():
  print 'Adding build environment for',subdir
  env = szgEnv.Clone()
  for d in depend['internal']:
    env.Prepend( LIBS=makeLibName(d) )
  for flagGroup in depend['external']:
    env.MergeFlags( externalFlags[flagGroup] )
  envDict[subdir+'Env'] = env

envDict['subdirs'] = subdirs.keys()
