# Linux-specific build script for scons

import os
import sys
from szgscons import makeLibName

Import('envDict')

numCPU = int(os.environ.get( 'NUMBER_OF_PROCESSORS', 2 ))
SetOption( 'num_jobs', numCPU )

# Create standard Linux build environment.
basicEnv = Environment()


externalDependencies = {
    'language':{
      'external':[]
      },
    'math'    :{
      'external':[]
      },
    'phleet'  :{
      'external':[]
      },
    'barrier'  :{
      'external':[]
      },
    'drivers'  :{
      'external':[]
      },
    'graphics'  :{
      'external':['glut','jpeg']
      },
    'model'  :{
      'external':['glut','jpeg','3ds']
      },
    'sound'  :{
      'external':['fmod']
      },
    'interaction'  :{
      'external':[]
      },
    'framework'  :{
      'external':['glut','jpeg','3ds','fmod']
      },
    'utilities'  :{
      'external':['glut','jpeg','3ds','fmod']
      },
    'demo'  :{
      'external':['glut','jpeg','3ds','fmod']
      },
    }


pathDict = envDict['paths']
subdirs = envDict['subdirs']

for d,ed in externalDependencies.iteritems():
  subdirs[d].update( ed )

commonFlags = {
    'LIBPATH':[pathDict['libPath']],
    'LIBS':['dl','pthread','m'],
    'CCFLAGS':['-fPIC','-O2','-Wall','-W','-Wpointer-arith','-march=i686','-D AR_USE_LINUX'],
    'LINKFLAGS':['-Wl,-rpath,'+pathDict['binPath']]
    }

if os.environ.get('SZG_LINKING','STATIC') != 'DYNAMIC':
  commonFlags['CCFLAGS'].append('-D AR_LINKING_STATIC')
else:
  commonFlags['CCFLAGS'].append('-D AR_LINKING_DYNAMIC')

szgEnv = basicEnv.Clone()
bld = Builder( action='ar -r $TARGET $SOURCES', prefix='lib', suffix='.a', src_suffix='.o' )
szgEnv['BUILDERS']['StaticLibrary'] = bld
szgEnv.MergeFlags( envDict['versionFlags'] )
szgEnv.MergeFlags( commonFlags )

# Create and install target for locations outside of szg.
szgEnv.Alias( 'install', pathDict['binPath'] )

envDict['szgEnv'] = szgEnv


############# Detecting libraries ##########################

######## Check and get flags for external dependencies ######

externalFlags = {}

SConscript( 'SConscript.glut', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.curses', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.jpeg', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.3ds', exports=['szgEnv','externalFlags'] )
SConscript( 'SConscript.fmod', exports=['szgEnv','externalFlags'] )

envDict['externalFlags'] = externalFlags

######## Detecting libraries end ############################

# Construct build & dependency tree, adding appropriate
# compile and link flags for prior directories' headers
# and libraries.
for subdir,depend in subdirs.iteritems():
  print 'Adding build environment for',subdir
  env = szgEnv.Clone()
  for d in depend['internal']:
    env.Prepend( LIBS=makeLibName(d) )
    env.Prepend( CPPPATH=['#/src/'+d] )
  for flagGroup in depend['external']:
    env.MergeFlags( externalFlags[flagGroup] )
  envDict[subdir+'Env'] = env
