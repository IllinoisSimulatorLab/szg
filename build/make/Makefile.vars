#**************************************************************
# Set compiler flag definitions based on MACHINE
# (as determined by Makefile.os).  Modify them through
# Makefile.libscan, which detects installed optional libraries.
#**************************************************************

# For developers' convenience.  Unused by Syzygy itself.
SZG_MAJOR_VERSION := 1
SZG_MINOR_VERSION := 4
SZG_PATCH_VERSION := 0

#**************************************************************
# Environment variables that affect the build:
#  SZGHOME
#	Top-level directory.  Required; others are optional.
#  SZGBIN
#	Location of executables and shared libraries.
#	Defaults to $(SZGHOME)/bin/$(PLATFORM).
#	Required for "make install-shared", etc.
#  SZGEXTERNAL
#	Location of external libraries.
#	Ignored if SZG_DEVELOPER_STYLE = EASY;
#	then $(SZGHOME)/external is used instead.
#  SZGDEBUG
#	If TRUE, libraries, executables, and plugins are built debug.
#  SZG_DEVELOPER_STYLE
#	If EASY, a special build process is used for
#	external executables, suited to using prebuilt libraries.
#  SZG_STLPORT
#	Use STLport instead of the inadequate 
#	C++ standard library of Windows' Visual Studio 6.
#  SZG_USE_PCH
#	If FALSE, in Windows don't use precompiled headers.
#  SZG_MULTITEX
#	If FALSE, disable multitexturing
#	(so q33 compiles on Darwin and Red Hat 9).
#  SZG_LINKING
#	If STATIC, link Syzygy executables statically.
#**************************************************************

ifeq ($(strip $(PLATFORM)),)
  include $(SZGHOME)/build/make/Makefile.os
endif

#**************************************************************
# LINUX

ifeq ($(strip $(MACHINE)),LINUX)
  include $(SZGHOME)/build/make/Makefile.varslinux
endif

#*************************************************************
# OS X

ifeq ($(strip $(MACHINE)),DARWIN)
  include $(SZGHOME)/build/make/Makefile.varsdarwin
endif

#*************************************************************
# SGI

ifeq ($(strip $(MACHINE)),MIPS3)
  PLATFORM = mips3
  MACHINE = SGI
endif
ifeq ($(strip $(MACHINE)),MIPS4)
  PLATFORM = mips4
  MACHINE = SGI
endif

ifeq ($(strip $(MACHINE)),SGI)
  include $(SZGHOME)/build/make/Makefile.varssgi
endif

#*************************************************************
# WINDOWS

ifeq (,$(strip $(SZGHOME_NOCOLON)))
  SZGHOME_NOCOLON := $(SZGHOME)
  ifeq ($(strip $(MACHINE)),WIN32)
    ifneq (,$(findstring cygdrive, $(PATH)))
      ifneq (,$(findstring :, $(SZGHOME)))
	# SZGHOME has a colon.  Change x: to /cygdrive/x, for gmake 3.81.
	SZGHOME_NOCOLON := $(subst :,,/cygdrive/$(SZGHOME))
      endif
    endif
  endif
endif

ifeq ($(strip $(MACHINE)),WIN32)
  ifeq ($(strip $(SZG_COMPILER)),MINGW)
    include $(SZGHOME)/build/make/Makefile.varswin32mingw
  else
    include $(SZGHOME)/build/make/Makefile.varswin32vc
  endif
endif

#*************************************************************
# Syzygy version preprocessor flag

COMPILE_FLAGS += -DSZG_MAJOR_VERSION=$(SZG_MAJOR_VERSION)
COMPILE_FLAGS += -DSZG_MINOR_VERSION=$(SZG_MINOR_VERSION)
COMPILE_FLAGS += -DSZG_PATCH_VERSION=$(SZG_PATCH_VERSION)

ifneq (,$(strip $(OSTYPE)))
COMPILE_FLAGS += -D$(OSTYPE)
endif

ifeq ($(strip $(SZG_LINKING)), STATIC) 
  COMPILE_FLAGS += -D "AR_LINKING_STATIC"
else 
ifeq ($(strip $(SZG_LINKING)), DYNAMIC) 
  COMPILE_FLAGS += -D "AR_LINKING_DYNAMIC"
else
  $(error Environment variable SZG_LINKING must be either STATIC (recommended) or DYNAMIC)
endif
endif

#*************************************************************
# Scan for the libraries, and set compiler and linker flags.

include $(SZGHOME)/build/make/Makefile.libscan

#*************************************************************
# Miscellany
#
# Variables for compiling and linking:
#   SZG_INCLUDE: include directories.
#   SZG_LIBRARY_LIBS: shared libraries. Either all of them (the default)
#     or a subset (for the intermediate makefiles).
#   SZG_OPTIONAL_LIBS: External libraries found by lib-scanning.
#   SZG_LINK_LIBS: System libraries, given by
#     $(DEVICE_LIBS) $(GRAPHICS_LIBS) $(GENERAL_LIBS).
#
# Many internal makefiles manually restrict the number of
# include dirs and libs.  Apps, though, use a standard set.

# Do NOT override definitions of an INTERNAL make (of Syzygy itself).
ifneq ($(strip $(SZG_INCLUDE_STYLE)),INTERNAL)

ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
# The "EASY" library style gives syzygy app
# programmers a nicely packaged version of the headers and libraries
# as compiled for a particular platform.  Internal Syzygy developers
# shouldn't use this.

  # SZG_INCLUDE_GLUT lets Mac OS X handle X11 includes.
  SZG_INCLUDE = -I$(SZGHOME)/include \
  $(SZG_OPT_INCLUDE_FULL) \
  $(SZG_INCLUDE_GLUT)

else
SZG_INCLUDE = \
  -I$(SZGHOME)/src/language \
  -I$(SZGHOME)/src/math \
  -I$(SZGHOME)/src/phleet \
  -I$(SZGHOME)/src/barrier \
  -I$(SZGHOME)/src/drivers \
  -I$(SZGHOME)/src/graphics \
  -I$(SZGHOME)/src/model \
  -I$(SZGHOME)/src/sound \
  -I$(SZGHOME)/src/interaction \
  -I$(SZGHOME)/src/framework \
  $(SZG_OPT_INCLUDE_FULL) \
  $(SZG_INCLUDE_GLUT)
# SZG_INCLUDE_GLUT is only for X11 headers on Mac OS X.

endif # of "EASY" build style

# These variables must be set (either for "EASY" or "DEVELOPER" build styles)
# assuming we are compiling from outside of the szg internal Makefiles.
# List libraries from highest to lowest level, reflecting Unix's static linking style.

# = not :=, because SZG_STATIC_MOD may cause these to change.
SZG_LIBRARY_LIBS = \
  $(FRAMEWORK_LIB_STRING) \
  $(INTERACT_LIB_STRING) \
  $(OBJECT_LIB_STRING) \
  $(SOUND_LIB_STRING) \
  $(GRAPHICS_LIB_STRING) \
  $(DRIVERS_LIB_STRING) \
  $(MATH_LIB_STRING) \
  $(BARRIER_LIB_STRING) \
  $(PHLEET_LIB_STRING) \
  $(LANGUAGE_LIB_STRING)

# The dependencies might differ from the libs.  For instance, on Unix,
# shared libs don't have absolute paths, but makefile dependencies do.
# Windows is easier: the linked .lib's aren't the .dll's loaded at runtime.

# = not :=, because SZG_STATIC_MOD may cause these to change.
SZG_LIBRARY_DEPS = \
  $(LANGUAGE_DEP_STRING) \
  $(PHLEET_DEP_STRING) \
  $(BARRIER_DEP_STRING) \
  $(MATH_DEP_STRING) \
  $(DRIVERS_DEP_STRING) \
  $(GRAPHICS_DEP_STRING) \
  $(SOUND_DEP_STRING) \
  $(OBJECT_DEP_STRING) \
  $(INTERACT_DEP_STRING) \
  $(FRAMEWORK_DEP_STRING)

SZG_CURRENT_LIB_SHORT_NAME =
# This seems just a little bit redundant, having SZG_OPTIONAL_LIBS
# set by SZG_OPT_LIBS_FULL, but it actually makes sense. Makefile.libscan
# sets SZG_OPT_LIBS_FULL (the list of everything that comes from SZGEXTERNAL).
# However, individual Makefiles, like Makefile.model, might set SZG_OPTIONAL_LIBS
# using just selected optional variables, like SZG_LINK_3DS.
# Consequently, SZG_OPTIONAL_LIBS has a different usage than SZG_OPT_LIBS_FULL.
SZG_OPTIONAL_LIBS = $(SZG_OPT_LIBS_FULL)
SZG_LINK_LIBS = $(GRAPHICS_LIBS) $(GENERAL_LIBS)

endif # of "internal" include style

ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)

  ifeq ($(strip $(SZG_LINKING)), STATIC)
    # Dependencies for static linking.
    LANGUAGE_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarLanguage_static$(STATIC_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarPhleet_static$(STATIC_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarBarrier_static$(STATIC_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarMath_static$(STATIC_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarDrivers_static$(STATIC_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarGraphics_static$(STATIC_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarSound_static$(STATIC_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarModel_static$(STATIC_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarInteraction_static$(STATIC_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME_NOCOLON)/lib/libarFramework_static$(STATIC_SUFFIX)
  else
    # Dependencies for dynamic linking.
    LANGUAGE_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarLanguage$(DLL_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarPhleet$(DLL_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarBarrier$(DLL_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarMath$(DLL_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarDrivers$(DLL_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarGraphics$(DLL_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarSound$(DLL_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarModel$(DLL_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarInteraction$(DLL_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME_NOCOLON)/bin/libarFramework$(DLL_SUFFIX)
  endif

else

  ifeq ($(strip $(SZG_LINKING)), STATIC)
    # Dependencies for static linking.
    LANGUAGE_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/language/libarLanguage_static$(STATIC_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/phleet/libarPhleet_static$(STATIC_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/barrier/libarBarrier_static$(STATIC_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/math/libarMath_static$(STATIC_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/drivers/libarDrivers_static$(STATIC_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/graphics/libarGraphics_static$(STATIC_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/sound/libarSound_static$(STATIC_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/model/libarModel_static$(STATIC_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/interaction/libarInteraction_static$(STATIC_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/framework/libarFramework_static$(STATIC_SUFFIX)
  else
    # Dependencies for dynamic linking.
    LANGUAGE_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/language/libarLanguage$(DLL_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/phleet/libarPhleet$(DLL_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/barrier/libarBarrier$(DLL_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/math/libarMath$(DLL_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/drivers/libarDrivers$(DLL_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/graphics/libarGraphics$(DLL_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/sound/libarSound$(DLL_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/model/libarModel$(DLL_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/interaction/libarInteraction$(DLL_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME_NOCOLON)/build/$(PLATFORM)/framework/libarFramework$(DLL_SUFFIX)
  endif

endif # of "EASY" build style



# VPATH is defined in each Makefile.whatever file,
# just before including this Makefile.vars.
# SRCDIR is used in "make clean" for text-editor files.
SRCDIR=$(VPATH)

# Sets INSTALLDIR and SZG_BINDIR.
include $(SZGHOME)/build/make/Makefile.globals

# An individual project might want to use external libraries. When installing
# the resulting executables, install these shared libraries
# in the same spot. These variables let us do that in a standard way.
# Since Makefile fragments assume that SZG_SHARED_COPY_LOCAL is nonempty,
# always copy a placeholder file.
SZG_SHARED_COPY_LOCAL = $(SZGHOME)/build/make/blessing.txt
SZG_SHARED_COPY_ACTION_LOCAL =

# Variables relevent to the link commands.
# Libraries are treated differently, linked statically or dynamically.
# The different base names (libarLangage.* vs. libarLanguage_static.*)
# disambiguate Windows-DLL export libs from code-bearing static libs.
ifeq ($(strip $(SZG_LINKING)), STATIC)
  SZG_STATIC_MOD=_static
  SZG_CURRENT_LIB_MOD_NAME = $(SZG_CURRENT_LIB_SHORT_NAME)$(SZG_STATIC_MOD)
  SZG_CURRENT_LIB_NAME = lib$(SZG_CURRENT_LIB_MOD_NAME)
  SZG_CURRENT_LIB = $(SZG_CURRENT_LIB_NAME)$(LIB_SUFFIX)
  SZG_CURRENT_DLL = $(SZG_CURRENT_LIB_NAME)$(STATIC_SUFFIX)
else
  SZG_STATIC_MOD=
  SZG_CURRENT_LIB_MOD_NAME=$(SZG_CURRENT_LIB_SHORT_NAME)
  SZG_CURRENT_LIB_NAME = lib$(SZG_CURRENT_LIB_SHORT_NAME)
  SZG_CURRENT_LIB = $(SZG_CURRENT_LIB_NAME)$(LIB_SUFFIX)
  SZG_CURRENT_DLL = $(SZG_CURRENT_LIB_NAME)$(DLL_SUFFIX)
endif

# For Win32 "make create-install", put our .lib file
# in a special "lib" directory because Visual Studio distinguishes
# what you compile against from what you link with.
ifeq ($(strip $(MACHINE)),WIN32)
  # Only some projects produce a library that needs to be copied into the
  # install's lib directory.
  ifeq ($(strip $(SZG_COPY_LIB)),TRUE)
    SZG_LIB_COPY_LINE = $(CP) $(SZG_CURRENT_LIB) $(INSTALLDIR)/lib
  endif
endif

# Copy the stuff into the bin directory. Don't use SZGBIN since that isn't
# required to be defined. If just SZGHOME is defined, then a directory based
# on that will be the SZG_BINDIR.
COPY = $(CP) $@ $(SZG_BINDIR)

# For linking exe's built with the library.
# Win32 and Unix place libs differently in the link command.
SZG_EXE_FIRST = $(LINKER) $(PRE_LINK_LINE_EXE) $(LINK_FLAGS) $(LINK_PREFIX)$@
SZG_EXE_SECOND = $(POST_LINK_LINE_EXE)
SZG_USR_FIRST = $(LINKER) $(PRE_LINK_LINE_USR) $(LINK_FLAGS) $(LINK_PREFIX)$@
SZG_USR_SECOND = $(POST_LINK_LINE_USR)

ifeq ($(strip $(SZG_LINKING)), STATIC)
  # For creating static libs.
  LINK_SZG_LIB = $(STATIC_LINKER) $(LINK_PREFIX)$(SZG_CURRENT_DLL) $(OBJS)
else
  # For linking shared Syzygy libraries.
  # Win32 and Unix place libs differently in the link command.
  LINK_SZG_LIB = $(LINKER) $(PRE_LINK_LINE_LIB) $(LINK_FLAGS_SHARED) \
    $(LINK_PREFIX)$(SZG_CURRENT_DLL) $(OBJS) $(POST_LINK_LINE_LIB)
endif

# Useful for linking Syzygy loadable shared objects.
SZG_PLUGIN_FIRST = $(LINKER) $(PRE_LINK_LINE_EXE) $(LINK_FLAGS_PLUGIN) \
$(LINK_PREFIX)$@
