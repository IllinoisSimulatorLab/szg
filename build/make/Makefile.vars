#*************************************************************
# This file sets compiler flag definitions based on MACHINE
# (as determined by Makefile.os) and further modifies these
# based on Makefile.libscan, which figures out which optional
# libraries have been installed.
#*************************************************************

#**********************************************************
# The environment variable SZGDEBUG tells us which kind of
# build we are going to do: NORMAL or DEBUG.
# The default is NORMAL. NOTE: this has only been
# implemented on the Windows and Linux sides so far.
#**********************************************************

ifeq ($(strip $(SZGDEBUG)),TRUE)
  SZG_BUILD_STYLE := DEBUG
else
  SZG_BUILD_STYLE := NORMAL
endif

#*************************************************************
#                             LINUX
#*************************************************************

ifeq ($(strip $(MACHINE)),LINUX)
  MACHINE_DIR = linux
  # NOTE: In every instance, a build directory builds ALL of its targets
  # or NONE of them, so the -u is redundant.
  CP = cp

# suffixes
  OBJ_SUFFIX = .o
  DLL_SUFFIX=.so
  LIB_SUFFIX=.so
  EXE = 

# compilation
  COMPILER = g++
  ifeq ($(strip $(SZG_BUILD_STYLE)),NORMAL)
    COMPILE_FLAGS := -DAR_USE_LINUX -c -O2 \
    -Wall -W -Wpointer-arith -march=i686
  else
    COMPILE_FLAGS := -DAR_USE_LINUX -c -g \
    -Wall -W -Wpointer-arith -march=i686 
  endif
  COMPILE_FLAGS_SHARED := $(COMPILE_FLAGS)
 
  PRECOMPILED_HEADER_LOCATION_NORMAL := 
  PRECOMPILED_HEADER_LOCATION_DEMO := 
  PRECOMPILED_HEADER_LOCATION_ABSOLUTE := 
  PRECOMPILED_HEADER_LOCATION := 
  PRECOMPILED_HEADER_DISABLE :=
  COMPILE_FLAGS_DEBUG := $(COMPILE_FLAGS)
  COMPILE_FLAGS_NORMAL := $(COMPILE_FLAGS)
  PRECOMPILED_HEADER_LINE := \
    $(CP) ../../../src/language/arPrecompiled.cpp arPrecompiled$(OBJ_SUFFIX)
  INC_GL = -I./
  ifeq ($(strip $(SZG_BUILD_STYLE)),NORMAL)
    OPTIMIZE_FLAG = -O3
  else
    OPTIMIZE_FLAG = 
  endif

# linking
  LINKER = g++
  LINK_PREFIX = 
  LINK_FLAGS = -o
  LINK_FLAGS_DEBUG := $(LINK_FLAGS)
  LINK_FLAGS_SHARED = -shared -o
  GL_LIBS =  -lglut -lGLU -lGL
  MATH_LIB = -lm 
  GRAPHICS_LIBS = $(GL_LIBS) $(X_LIBS)
  JOYSTICK_LIBS =
  TRACKER_LIBS = 
  GENERAL_LIBS = -ldl -lpthread $(MATH_LIB) $(JOYSTICK_LIBS)
  LIBS = $(GRAPHICS_LIBS) $(GENERAL_LIBS)
  X_LIBS = -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi -lSM -lICE
  RANLIB = touch
# creating executables
  COPY1 = @-$(CP) $(ALL) $(BINDIR)
  COPY2 = 
  COPY3 = 
endif

#*************************************************************
#                             OS X
#*************************************************************

ifeq ($(strip $(MACHINE)),DARWIN)
  MACHINE_DIR = darwin  
  CP = cp

# suffixes
  OBJ_SUFFIX = .o
  DLL_SUFFIX=.so
  LIB_SUFFIX=.so
  EXE =

# compilation
  COMPILER = c++
  COMPILE_FLAGS := -DAR_BIG_ENDIAN -DAR_USE_DARWIN \
    -fno-common -c \
    #-g -O2
  COMPILE_FLAGS_SHARED:=$(COMPILE_FLAGS)
  PRECOMPILED_HEADER_LOCATION_NORMAL := 
  PRECOMPILED_HEADER_LOCATION_DEMO := 
  PRECOMPILED_HEADER_LOCATION_ABSOLUTE := 
  PRECOMPILED_HEADER_LOCATION := 
  PRECOMPILED_HEADER_DISABLE :=
  COMPILE_FLAGS_DEBUG := $(COMPILE_FLAGS)
  COMPILE_FLAGS_NORMAL := $(COMPILE_FLAGS)
  PRECOMPILED_HEADER_LINE := \
    $(CP) ../../../src/language/arPrecompiled.cpp arPrecompiled$(OBJ_SUFFIX)
  INC_GL = -I./
  OPTIMIZE_FLAG = -O3
  
# linking
  LINKER = c++
  LINK_PREFIX =
  LINK_FLAGS = -o
  LINK_FLAGS_DEBUG := $(LINK_FLAGS)
  LINK_FLAGS_SHARED = -bundle -flat_namespace -undefined suppress -o
  GL_LIBS = -framework OpenGL -framework GLUT \
	-framework COCOA
  MATH_LIB = -lm
  GRAPHICS_LIBS = $(GL_LIBS) $(X_LIBS)
  JOYSTICK_LIBS =
  TRACKER_LIBS =
  GENERAL_LIBS = $(MATH_LIB) $(SZGHOME)/contrib/dlcompat-20020709/libdl.a \
    -lpthread -lcurses -lobjc $(JOYSTICK_LIBS)
  LIBS = $(GENERAL_LIBS) $(GRAPHICS_LIBS)
  X_LIBS =
# creating executables
  COPY1 = @for i in $(ALL) ; do mkdir -p $(BINDIR)/$$i.app/Contents/MacOS/; done
  COPY2 = @for i in $(ALL) ; do cp $$i $(BINDIR)/$$i.app/Contents/MacOS/; done
  COPY3 = @for i in $(ALL) ; do rm -f $(BINDIR)/$$i; ln -s $(BINDIR)/$$i.app/Contents/MacOS/$$i $(BINDIR)/$$i;done
  RANLIB = ranlib
endif

#*************************************************************
#                             SGI
#*************************************************************


# Handle mips3/mips4 architecture on SGI.
ifeq ($(strip $(MACHINE)),MIPS3)
  MACHINE_DIR = mips3
  MACHINE = SGI
endif
ifeq ($(strip $(MACHINE)),MIPS4)
  MACHINE_DIR = mips4
  MACHINE = SGI
endif

ifeq ($(strip $(MACHINE)),SGI)
# which compiler are we going to use?
USE_SGI_COMPILER = CC
ifeq ($(strip $(USE_SGI_COMPILER)),g++)
  COMPILER = g++
  COMPILE_FLAGS := -DAR_USE_SGI -D_REENTRANT -D_SGI_MP_SOURCE -D_POSIX1C=1 -D_NO_ANSIMODE -c
  LINKER = g++
  LINK_FLAGS := -o
else
  COMPILER = CC
  COMPILE_FLAGS := -D_SGI_REENTRANT_FUNCTIONS -D_SGI_MP_SOURCE -DAR_USE_SGI -LANG:std -n32 \
-ptused -c
  LINKER = CC
  LINK_FLAGS := -D_SGI_REENTRANT_FUNCTIONS -D_SGI_MP_SOURCE -LANG:std -n32 -no_prelink -o
endif
  CP = cp

# suffixes
  OBJ_SUFFIX = .o
  DLL_SUFFIX=.so
  LIB_SUFFIX=.so
  EXE = 

# compilation
  PRECOMPILED_HEADER_LOCATION_NORMAL := 
  PRECOMPILED_HEADER_LOCATION_DEMO := 
  PRECOMPILED_HEADER_LOCATION_ABSOLUTE := 
  PRECOMPILED_HEADER_LOCATION := 
  PRECOMPILED_HEADER_DISABLE :=
  COMPILE_FLAGS_DEBUG := $(COMPILE_FLAGS)
  COMPILE_FLAGS_NORMAL := $(COMPILE_FLAGS) 
  PRECOMPILED_HEADER_LINE := \
    $(CP) ../../../src/language/arPrecompiled.cpp arPrecompiled$(OBJ_SUFFIX)
  INC_GL = -I/usr/local/isl/SGI/glut
  OPTIMIZE_FLAG = -O3

# linking
  LINK_PREFIX = 
  LINK_FLAGS_DEBUG := $(LINK_FLAGS)
  LINK_FLAGS_SHARED = -shared -o
  GL_LIBS = -L/usr/local/isl/SGI/glut -lglut -lGLU -lGL 
  X_LIBS = -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi -lSM -lICE
  MATH_LIB = -lm
  GENERAL_LIBS = -lpthread -lcurses $(MATH_LIB)
  GRAPHICS_LIBS = $(GL_LIBS) $(X_LIBS)
  JOYSTICK_LIBS =
  TRACKER_LIBS = /usr/local/CAVE/trackd/TRACKD_API/lib/libtrackdAPI_n32.a
  LIBS = $(GRAPHICS_LIBS) $(GENERAL_LIBS)
  RANLIB = touch
#creating executables
  COPY1 = @-$(CP) $(ALL) $(BINDIR)
  COPY2 =
  COPY3 =
endif

#*************************************************************
#                             WINDOWS
#*************************************************************

ifeq ($(strip $(MACHINE)),WIN32)
  MACHINE_DIR = win32
  # NOTE: In every instance, a build directory links ALL of its targets
  # or NONE of them, so the -u is rendundant.
  CP = cp

# suffixes
  OBJ_SUFFIX = .obj
  DLL_SUFFIX = .dll
  LIB_SUFFIX = .lib
  EXE = .exe

# compilation
  COMPILER = cl
  COMMON_COMPILE_FLAGS = -nologo -c -w -W0 -G6 -GX -D "_MBCS" \
-D "AR_USE_WIN_32"
# depending upon where we are building the exe, we need a different path
# to the precompiled header. NORMAL is for the library, DEMO is for the
# base demos. ABSOLUTE is for szgdemo
  PRECOMPILED_HEADER_LOCATION_NORMAL = ../language/arPrecompiled.pch
  PRECOMPILED_HEADER_LOCATION_DEMO = ../../language/arPrecompiled.pch
  PRECOMPILED_HEADER_LOCATION_ABSOLUTE = \
    $(SZGHOME)/build/win32/language/arPrecompiled.pch
# the default location is for the library
  PRECOMPILED_HEADER_LOCATION = $(PRECOMPILED_HEADER_LOCATION_NORMAL)
  PRECOMPILED_HEADER_DISABLE = -YX
  PRECOMPILED_HEADER_FLAGS = -YuarPrecompiled.h -Fp$(PRECOMPILED_HEADER_LOCATION)
  OPT_FLAGS_DEBUG = -D "_CONSOLE" -MTd -O1 -D "_DEBUG"
  OPT_FLAGS_NDEBUG = -D "_CONSOLE" -MT -O2 -D "NDEBUG"
  OPT_FLAGS_SHARED = -D "_USRDLL" -MT -O2 -D "NDEBUG"
ifneq ($(strip $(SZG_BUILD_STYLE)),NORMAL)
  OPT_FLAGS = $(OPT_FLAGS_DEBUG)
else
  OPT_FLAGS = $(OPT_FLAGS_NDEBUG)
endif
  COMPILE_FLAGS_DEBUG = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS_DEBUG) \
   $(PRECOMPILED_HEADER_FLAGS)
  COMPILE_FLAGS_NORMAL = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS_NDEBUG) \
   $(PRECOMPILED_HEADER_FLAGS)
  COMPILE_FLAGS_SHARED = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS_SHARED)
  COMPILE_FLAGS = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS) \
   $(PRECOMPILED_HEADER_FLAGS)

  PRECOMPILED_HEADER_LINE = $(COMPILER) $(COMMON_COMPILE_FLAGS) \
    $(OPT_FLAGS) \
    -Yc -FparPrecompiled.pch \
    ../../../src/language/arPrecompiled.cpp

  INC_GL = -I./
  OPTIMIZE_FLAG = -O2

# linking
  LINKER = link
  LINK_PREFIX = -out:
# NOTE: We used to put the joystick-related windows libs in
# the JOYSTICK_LIBS instead of LINK_LIBS variable. BUT... it seems
# that the linker will sometimes produce WEIRD errors (LNK1000) if this
# is true (very machine dependant).
# ALSO: we need to (in Makefile.libscan) add to LINK_LIBS instead of LIBS.
# This is because of the funny order in which Visual C++ puts libs on the
# link line. Consequently, the LINK_FLAGS* variables MUST NOT have := but
# instead = (LINK_LIBS will be changing later)
  LINK_LIBS = advapi32.lib kernel32.lib user32.lib gdi32.lib \
  opengl32.lib glu32.lib glut32.lib Ws2_32.lib dinput.lib dxguid.lib
  LINK_LINE = $(LINK_LIBS) -nologo -subsystem:console -incremental:no
  LINK_FLAGS_DEBUG = $(LINK_LINE) -NODEFAULTLIB:LIBCMT.LIB -debug 
  LINK_FLAGS_SHARED = $(LINK_LIBS) -nologo -incremental:no -dll
# The default for no debugging
  LINK_FLAGS = $(LINK_LINE) -NODEFAULTLIB:LIBCMTD
ifneq ($(strip $(SZG_BUILD_STYLE)),NORMAL)
  LINK_FLAGS = $(LINK_FLAGS_DEBUG)
endif

# none of the following is defined since the libraries appear in a different
# spot on the Win32 side.
  GL_LIBS =
  X_LIBS = 
  MATH_LIB =
  GRAPHICS_LIBS = $(GL_LIBS) $(X_LIBS)
  JOYSTICK_LIBS = 
  TRACKER_LIBS = 
# quite a bit of stuff needs to link with the joystick libs
  GENERAL_LIBS = $(JOYSTICK_LIBS)
  LIBS = $(GRAPHICS_LIBS) $(GENERAL_LIBS)
  RANLIB = @echo
# creating executables
  COPY1 = @-$(CP) $(ALL) $(BINDIR)
  COPY2 =
  COPY3 = 
endif

#**************************************************************************
# The following definitions are useful for creating compact demo Makefiles
#**************************************************************************

# the necessary include directories
# WARNING: make/demo/Makefile.* overwrites SZG_INCLUDE with its own values.
INC_SRC := $(SZGHOME)/src

#for some superstitious reason, it seems to be a good idea to do this,
#especially on darwin
MACHINE_DIR := $(strip $(MACHINE_DIR))

# The "EASY" library style is provided to allow external application 
# developers to take a nicely packaged version of the headers and libraries
# as compiled for a particular platform and just run with it.
# On the other hand, if you are working on the library itself, it will be
# better to use the traditional style.
ifeq ($(strip $(SZG_LIBRARY_STYLE)),EASY)

SZG_INCLUDE := -I$(SZGHOME)/include
SZG_LIBS := $(SZGHOME)/lib/libszg.a

else

SZG_INCLUDE := \
	-I$(INC_SRC)/barrier \
	-I$(INC_SRC)/drivers \
	-I$(INC_SRC)/graphics \
	-I$(INC_SRC)/language \
	-I$(INC_SRC)/math \
	-I$(INC_SRC)/obj \
	-I$(INC_SRC)/phleet \
	-I$(INC_SRC)/sound \
	-I$(INC_SRC)/interaction \
	-I$(INC_SRC)/demo \
	-I$(SZGHOME)/contrib/dlcompat-20020709 \
	$(INC_GL)

SZG_LIBS := \
	$(SZGHOME)/build/$(MACHINE_DIR)/demo/libarFramework.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/interaction/libarInteract.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/sound/libarSound.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/obj/libarObjects.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/graphics/libarGraphics.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/drivers/libarDrivers.a \
	$(SZGHOME)/build/$(MACHINE_DIR)/math/libarMath.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/barrier/libarBarrier.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/phleet/libarPhleet.a \
        $(SZGHOME)/build/$(MACHINE_DIR)/language/libarLanguage.a

endif

# VPATH is defined in each Makefile.whatever file.
SRCDIR=$(VPATH)

#a stupid hack to test if the environment variable is set... how is this
#really done?
ifeq ($(strip $(SZGBIN)),)
  BINDIR=$(SZGHOME)/bin/$(strip $(MACHINE_DIR))
else
  BINDIR=$(SZGBIN)
endif

#***************************************************************************
# We go ahead and scan for the libraries here... in addition to setting
# compiler flags and linker flags, as appropriate.
#
# Needs to be an absolute path since we may be calling this from a demo build
# directory.
#***************************************************************************

include $(SZGHOME)/build/make/Makefile.libscan

#***************************************************************************
# Seems reasonable to put the suffix definitions here
#***************************************************************************

.SUFFIXES : .obj .cpp .c .o .so .lib .dll
