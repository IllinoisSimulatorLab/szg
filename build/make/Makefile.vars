#**************************************************************
# Set compiler flag definitions based on MACHINE
# (as determined by Makefile.os).  Modify them through
# Makefile.libscan, which detects installed optional libraries.
#**************************************************************

#**************************************************************
# Current Syzygy version.
#**************************************************************

SZG_MAJOR_VERSION := 1
SZG_MINOR_VERSION := 1
SZG_PATCH_VERSION := 0 

#**************************************************************
# The environment variables that affect the build are:
#  SZGHOME: REQUIRED. The top-level directory of the szg.
#  SZGBIN: Optional. If defined, this is where the executables
#          and shared libraries are placed. Otherwise, they
#          are placed in $(SZGHOME)/bin/$(MACHINE_DIR).
#          NOTE: This MUST be set for targets like "install-shared"
#          to work.
#  SZGEXTERNAL: Optional. This is where external libraries get
#               placed (in a defined directory structure) if
#               they are to be used by the library. However,
#               if SZG_DEVELOPER_STYLE=EASY, then SZGEXTERNAL
#               is *ignored* and the build process searches 
#               for the external libraries in 
#               $(SZGHOME)/external.
#  SZGDEBUG: Optional. If defined and equal to TRUE, the
#            libraries, executables, and plugins are built 
#            debug.
#  SZG_DEVELOPER_STYLE: Optional. If defined and equal to EASY,
#                       a special build process is used for
#                       external executables (which is suited
#                       to using prebuilt libraries).
#  SZG_STLPORT: Optional. This is only respected on the windows
#               side. Present since Visual Studio 6 did not 
#               have a good enough implementation of the STL
#               to use with our dll approach in szg-0.7 and 
#               later. If this is set to TRUE, a *windows* 
#               build will attempt to use STLport as the
#               c++ standard lib.
#  SZG_USE_PCH: Optional. Only has meaning on the Windows side.
#               If SZG_DEVELOPER_STYLE is not EASY, then setting
#               this to FALSE over-rides the default (in the
#               DEVELOPER build style it is to use them) and
#               the build will NOT use precompiled headers.
#  SZG_MULTITEX: Some platforms do not seem to support the 
#                multitexturing extension tricks of the q33
#                demo (some versions of OS X and RedHat 9).
#                Set this to FALSE, and q33 will compile on
#                those platforms.
#  SZG_LINKING: Optional. If this is set to STATIC, the szg
#               libraries will be built as static objects and
#               execuatbles will statically link them.
#**************************************************************

#**************************************************************
# LINUX

ifeq ($(strip $(MACHINE)),LINUX)
  include $(SZGHOME)/build/make/Makefile.varslinux
endif

#*************************************************************
# OS X

ifeq ($(strip $(MACHINE)),DARWIN)
  include $(SZGHOME)/build/make/Makefile.varsdarwin
endif

#*************************************************************
# SGI


# Handle mips3/mips4 architecture on SGI.
ifeq ($(strip $(MACHINE)),MIPS3)
  MACHINE_DIR = mips3
  MACHINE = SGI
endif
ifeq ($(strip $(MACHINE)),MIPS4)
  MACHINE_DIR = mips4
  MACHINE = SGI
endif

ifeq ($(strip $(MACHINE)),SGI)
  include $(SZGHOME)/build/make/Makefile.varssgi
endif

#*************************************************************
# WINDOWS

ifeq ($(strip $(MACHINE)),WIN32)
  ifneq ($(strip $(SZG_COMPILER)),MINGW)
    include $(SZGHOME)/build/make/Makefile.varswin32vc
  else
    include $(SZGHOME)/build/make/Makefile.varswin32mingw
  endif
endif

#*************************************************************
# Syzygy version preprocessor flag

COMPILE_FLAGS += -DSZG_MAJOR_VERSION=$(SZG_MAJOR_VERSION)
COMPILE_FLAGS += -DSZG_MINOR_VERSION=$(SZG_MINOR_VERSION)
COMPILE_FLAGS += -DSZG_PATCH_VERSION=$(SZG_PATCH_VERSION)

#*************************************************************
# Scan for the libraries, and set compiler and linker flags.
# Start from $(SZGHOME), so non-ISL apps can use it.

include $(SZGHOME)/build/make/Makefile.libscan

#*************************************************************
# Miscellany
#
# Variables for compiling and linking:
#   SZG_INCLUDE: include directories.
#   SZG_LIBRARY_LIBS: shared libraries. Either all of them (the default)
#     or a subset (for the intermediate makefiles).
#   SZG_OPTIONAL_LIBS: External libraries found by lib-scanning.
#   SZG_LINK_LIBS: System libraries, given by
#     $(DEVICE_LIBS) $(GRAPHICS_LIBS) $(GENERAL_LIBS).
#
# Many internal makefiles manually restrict the number of
# include dirs and libs.  Apps, though, use a standard set of these.

# Do NOT override definitions of an INTERNAL make (of Syzygy itself).
ifneq ($(strip $(SZG_INCLUDE_STYLE)),INTERNAL)

ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
# The "EASY" library style gives external application 
# developers a nicely packaged version of the headers and libraries
# as compiled for a particular platform.  Internal Syzygy developers
# shouldn't use this.

  # SZG_INCLUDE_GLUT lets Mac OS X handle X11 includes.
  SZG_INCLUDE = -I$(SZGHOME)/include \
  $(SZG_OPT_INCLUDE_FULL) \
  $(SZG_INCLUDE_GLUT)
  
  ifeq ($(strip $(SZG_LINKING)), STATIC) 
    # Dependencies for static linking.
    LANGUAGE_DEP_STRING = $(SZGHOME)/lib/libarLanguage_static$(STATIC_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME)/lib/libarPhleet_static$(STATIC_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME)/lib/libarBarrier_static$(STATIC_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME)/lib/libarMath_static$(STATIC_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME)/lib/libarDrivers_static$(STATIC_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME)/lib/libarGraphics_static$(STATIC_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME)/lib/libarSound_static$(STATIC_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME)/lib/libarObject_static$(STATIC_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME)/lib/libarInteraction_static$(STATIC_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME)/lib/libarFramework_static$(STATIC_SUFFIX)
  else 
    # Dependencies for dynamic linking.
    LANGUAGE_DEP_STRING = $(SZGHOME)/bin/libarLanguage$(DLL_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME)/bin/libarPhleet$(DLL_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME)/bin/libarBarrier$(DLL_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME)/bin/libarMath$(DLL_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME)/bin/libarDrivers$(DLL_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME)/bin/libarGraphics$(DLL_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME)/bin/libarSound$(DLL_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME)/bin/libarObject$(DLL_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME)/bin/libarInteraction$(DLL_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME)/bin/libarFramework$(DLL_SUFFIX)
  endif

else

# Bizarrely, the SZG_INCLUDE_GLUT below is really only necessary for the
# X11 headers on Mac OS X.
SZG_INCLUDE = \
  -I$(SZGHOME)/src/language \
  -I$(SZGHOME)/src/math \
  -I$(SZGHOME)/src/phleet \
  -I$(SZGHOME)/src/barrier \
  -I$(SZGHOME)/src/drivers \
  -I$(SZGHOME)/src/graphics \
  -I$(SZGHOME)/src/obj \
  -I$(SZGHOME)/src/sound \
  -I$(SZGHOME)/src/interaction \
  -I$(SZGHOME)/src/framework \
  $(SZG_OPT_INCLUDE_FULL) \
  $(SZG_INCLUDE_GLUT)

  ifeq ($(strip $(SZG_LINKING)), STATIC) 
    # Dependencies for static linking.
    LANGUAGE_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/language/libarLanguage_static$(STATIC_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/phleet/libarPhleet_static$(STATIC_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/barrier/libarBarrier_static$(STATIC_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/math/libarMath_static$(STATIC_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/drivers/libarDrivers_static$(STATIC_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/graphics/libarGraphics_static$(STATIC_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/sound/libarSound_static$(STATIC_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/obj/libarObject_static$(STATIC_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/interaction/libarInteraction_static$(STATIC_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/framework/libarFramework_static$(STATIC_SUFFIX)
  else
    # Dependencies for dynamic linking.
    LANGUAGE_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/language/libarLanguage$(DLL_SUFFIX)
    PHLEET_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/phleet/libarPhleet$(DLL_SUFFIX)
    BARRIER_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/barrier/libarBarrier$(DLL_SUFFIX)
    MATH_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/math/libarMath$(DLL_SUFFIX)
    DRIVERS_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/drivers/libarDrivers$(DLL_SUFFIX)
    GRAPHICS_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/graphics/libarGraphics$(DLL_SUFFIX)
    SOUND_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/sound/libarSound$(DLL_SUFFIX)
    OBJECT_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/obj/libarObject$(DLL_SUFFIX)
    INTERACT_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/interaction/libarInteraction$(DLL_SUFFIX)
    FRAMEWORK_DEP_STRING = $(SZGHOME)/build/$(MACHINE_DIR)/framework/libarFramework$(DLL_SUFFIX)
  endif

endif # end of the check to see if we are using the "EASY" build style

# These variables must be set (either for "EASY" or "DEVELOPER" build styles)
# assuming we are compiling from outside of the szg internal Makefiles...
# Note that we list libraries from highest level to lowest level. This reflects
# the static linking style demanded by Unix.

# DO NOT use := HERE. The strings can change because of a variable that will
# be set LATER (SZG_STATIC_MOD).
SZG_LIBRARY_LIBS = \
  $(FRAMEWORK_LIB_STRING) \
  $(INTERACT_LIB_STRING) \
  $(OBJECT_LIB_STRING) \
  $(SOUND_LIB_STRING) \
  $(GRAPHICS_LIB_STRING) \
  $(DRIVERS_LIB_STRING) \
  $(MATH_LIB_STRING) \
  $(BARRIER_LIB_STRING) \
  $(PHLEET_LIB_STRING) \
  $(LANGUAGE_LIB_STRING)

# The dependencies might be different from the libs. For instance, on
# Unix platforms, we DO NOT want to have absolute paths to the shared
# libraries, but our dependencies for the make MUST have absolute paths.
# On Windows, the situation is easier since we link with .lib files, which 
# are NOT the files that the executable runtime links with.

# DO NOT use := HERE. The strings can change because of a variable that will
# be set LATER (SZG_STATIC_MOD)
SZG_LIBRARY_DEPS = \
  $(LANGUAGE_DEP_STRING) \
  $(PHLEET_DEP_STRING) \
  $(BARRIER_DEP_STRING) \
  $(MATH_DEP_STRING) \
  $(DRIVERS_DEP_STRING) \
  $(GRAPHICS_DEP_STRING) \
  $(SOUND_DEP_STRING) \
  $(OBJECT_DEP_STRING) \
  $(INTERACT_DEP_STRING) \
  $(FRAMEWORK_DEP_STRING)

SZG_CURRENT_LIB_SHORT_NAME =
# This seems just a little bit redundant, having SZG_OPTIONAL_LIBS
# set by SZG_OPT_LIBS_FULL, but it actually makes sense. Makefile.libscan
# sets SZG_OPT_LIBS_FULL (the list of everything that comes from SZGEXTERNAL).
# However, individual Makefiles, like Makefile.obj, might set SZG_OPTIONAL_LIBS
# using just selected optional variables, like SZG_LINK_3DS.
# Consequently, SZG_OPTIONAL_LIBS has a different usage than SZG_OPT_LIBS_FULL.
SZG_OPTIONAL_LIBS = $(SZG_OPT_LIBS_FULL)
SZG_LINK_LIBS = $(GRAPHICS_LIBS) $(GENERAL_LIBS)

endif # end of the check to see if we are using the "internal" include style

# VPATH is defined in each Makefile.whatever file. SRCDIR is used in the
# *clean* option (allowing us to get rid of certain editor files)
SRCDIR=$(VPATH)

# Sets INSTALLDIR and SZG_BINDIR.
include $(SZGHOME)/build/make/Makefile.globals

# An individual project might want to use external libraries. When installing
# the resulting executables, we should install these shared libraries 
# in the same spot. These variables let us do that in a standard way.
# Please note that the Makefile fragments assume that SZG_SHARED_COPY_LOCAL
# will be non-empty. Consequently, a small placeholder file always gets
# copied.
SZG_SHARED_COPY_LOCAL = $(SZGHOME)/build/make/blessing.txt
SZG_SHARED_COPY_ACTION_LOCAL =

# Variables relevent to the link commands. The libraries are treated
# differently in case of static linking than they are for dynamic linking.
# The different base names (libarLangage.* vs. libarLanguage_static.*)
# are necessary to disambiguate on the Windows side between the dll's export
# library and the code-bearing static library. 
ifeq ($(strip $(SZG_LINKING)), STATIC) 
  SZG_STATIC_MOD=_static
  SZG_CURRENT_LIB_MOD_NAME = $(SZG_CURRENT_LIB_SHORT_NAME)$(SZG_STATIC_MOD)
  SZG_CURRENT_LIB_NAME = lib$(SZG_CURRENT_LIB_MOD_NAME)
  SZG_CURRENT_LIB = $(SZG_CURRENT_LIB_NAME)$(LIB_SUFFIX)
  SZG_CURRENT_DLL = $(SZG_CURRENT_LIB_NAME)$(STATIC_SUFFIX)
else
  SZG_STATIC_MOD=
  SZG_CURRENT_LIB_MOD_NAME=$(SZG_CURRENT_LIB_SHORT_NAME)
  SZG_CURRENT_LIB_NAME = lib$(SZG_CURRENT_LIB_SHORT_NAME)
  SZG_CURRENT_LIB = $(SZG_CURRENT_LIB_NAME)$(LIB_SUFFIX)
  SZG_CURRENT_DLL = $(SZG_CURRENT_LIB_NAME)$(DLL_SUFFIX)
endif

# For Win32 "make create-install", put our .lib file
# in a special "lib" directory because Visual Studio distinguishes
# what you compile against from what you link with.
ifeq ($(strip $(MACHINE)),WIN32)
  # Only some projects produce a library that needs to be copied into the
  # install's lib directory.
  ifeq ($(strip $(SZG_COPY_LIB)),TRUE)
    SZG_LIB_COPY_LINE = $(CP) $(SZG_CURRENT_LIB) $(INSTALLDIR)/lib
  endif
endif

# Copy the stuff into the bin directory. Don't use SZGBIN since that isn't
# required to be defined. If just SZGHOME is defined, then a directory based
# on that will be the SZG_BINDIR.
COPY = $(CP) $@ $(SZG_BINDIR)

# For linking exe's built with the library.
# Win32 and Unix place libs differently in the link command.
SZG_EXE_FIRST = $(LINKER) $(PRE_LINK_LINE_EXE) $(LINK_FLAGS) $(LINK_PREFIX)$@
SZG_EXE_SECOND = $(POST_LINK_LINE_EXE)
SZG_USR_FIRST = $(LINKER) $(PRE_LINK_LINE_USR) $(LINK_FLAGS) $(LINK_PREFIX)$@
SZG_USR_SECOND = $(POST_LINK_LINE_USR)

ifeq ($(strip $(SZG_LINKING)), STATIC) 
  # For creating static libs.
  LINK_SZG_LIB = $(STATIC_LINKER) $(LINK_PREFIX)$(SZG_CURRENT_DLL) $(OBJS)
else
  # For linking shared Syzygy libraries. 
  # Win32 and Unix place libs differently in the link command.
  LINK_SZG_LIB = $(LINKER) $(PRE_LINK_LINE_LIB) $(LINK_FLAGS_SHARED) \
    $(LINK_PREFIX)$(SZG_CURRENT_DLL) $(OBJS) $(POST_LINK_LINE_LIB)
endif

# Useful for linking Syzygy loadable shared objects.
SZG_PLUGIN_FIRST = $(LINKER) $(PRE_LINK_LINE_EXE) $(LINK_FLAGS_PLUGIN) \
$(LINK_PREFIX)$@
