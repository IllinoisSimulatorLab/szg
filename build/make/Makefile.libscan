# This Makefile fragment detects which optional libraries are installed.
# It defines variables used by Makefiles that include it:
#
# SZG_OPT_FLAGS: Compiler flags that enable particular features.
# SZG_OPT_INCLUDE_FULL: A complete sequence of include directories for the
#   optional libraries.
# SZG_OPT_LIBS_FULL: Linker options for SZG_OPT_INCLUDE_FULL.
# SZG_SHARED_COPY: Shared libraries to be copied into the SZGBIN
#   directory via a Makefile target.
# SZG_SHARED_COPY_ACTION: On unix, makes symbolic links for soname's.
#
# Each optional library XXX also defines SZG_INCLUDE_XXX and SZG_LINK_XXX.
# The szg libraries are created incrementally.  Options for compiler and linker
# are applied only as needed (e.g., FMOD only for szg/sound and szg/framework).

# blessing.txt is a placeholder so that SZG_SHARED_COPY isn't empty.
SZG_SHARED_COPY = $(SZGHOME)/build/make/blessing.txt
SZG_SHARED_COPY_ACTION :=

ifeq ($(strip $(MACHINE)), LINUX)
	SZG_LINK_PYTHON := $(SZG_PYLIB)

  GLUT_DIR := $(SZGEXTERNAL)/linux/glut-3.7
  INC_GLUT := $(wildcard $(GLUT_DIR)/include)
  LINK_GLUT := -lglut
  OBJ_GLUT := $(wildcard $(GLUT_DIR)/lib/libglut.so.3.7)

	FMOD_DIR := $(SZGEXTERNAL)/linux/fmod-4
	INC_FMOD := $(wildcard $(FMOD_DIR)/include)
	LIB_FMOD := $(wildcard $(FMOD_DIR)/lib/libfmodex.so.4.03.06)
	LINK_FMOD := $(wildcard $(FMOD_DIR)/lib/libfmodex.so.4.03.06)
	OBJ_FMOD := $(wildcard $(FMOD_DIR)/lib/libfmodex.so.4.03.06)
  
  JPEG_DIR := $(SZGEXTERNAL)/linux/jpeg
  INC_JPEG := $(wildcard $(JPEG_DIR)/include)
  LIB_JPEG := $(wildcard $(JPEG_DIR)/lib/libjpeg.a)

  ZLIB_DIR := $(SZGEXTERNAL)/linux/zlib
  INC_ZLIB := $(wildcard $(ZLIB_DIR)/include)
  LIB_ZLIB := $(wildcard $(ZLIB_DIR)/lib/libz.a)

  3DS_DIR := $(SZGEXTERNAL)/linux/lib3ds
  INC_3DS := $(wildcard $(3DS_DIR)/include)
  LIB_3DS := $(wildcard $(3DS_DIR)/lib/lib3ds.a)
  
  VRPN_DIR := $(SZGEXTERNAL)/linux/vrpn
  INC_VRPN := $(wildcard $(VRPN_DIR)/include)
  LIB_VRPN := $(wildcard $(VRPN_DIR)/lib/libvrpn.a)

  ISENSE_DIR := $(SZGEXTERNAL)/linux/isense
  OBJ_ISENSE := $(wildcard $(ISENSE_DIR)/lib/libisense.so)

  # If the isense dll is available, copy its objects to SZG_BINDIR
  # in the install-shared target.
  ifneq ($(strip $(OBJ_ISENSE)),)
    SZG_SHARED_COPY += $(OBJ_ISENSE)
  endif


  # If the wiiuse dll is available, copy it to SZGBIN
  WIIUSE_DIR := $(SZGEXTERNAL)/linux/wiiuse-0.9
  INC_WIIUSE := $(wildcard $(WIIUSE_DIR)/include)
  OBJ_WIIUSE := $(wildcard $(WIIUSE_DIR)/api/wiiuse.o)
  LIB_WIIUSE := $(wildcard $(WIIUSE_DIR)/src/wiiuse.so)

  ifneq ($(strip $(OBJ_WIIUSE)),)
    SZG_SHARED_COPY += $(LIB_WIIUSE)
    SZG_OPT_FLAGS += -DEnableWiimote
    SZG_INCLUDE_WIIUSE = -I$(INC_WIIUSE)
  endif

  # Only GLUT gets a default link and include value.  The latter is blank,
  # since most GLUT installations put .h files in the default include path.
  ifneq ($(strip $(OBJ_GLUT)),)
    SZG_SHARED_COPY += $(OBJ_GLUT)
    # Relative, not absolute, symlinks.
    SZG_SHARED_COPY_ACTION += \
      rm -f libglut.so.3; rm -f libglut.so; \
      ln -s libglut.so.3.7 libglut.so.3 ; \
      ln -s libglut.so.3 libglut.so ;
    SZG_INCLUDE_GLUT = -I$(INC_GLUT)
    SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
    # -rpath lets shared libs be only in their compiled-in directories,
    # or in the local bin directory as well.
    SZG_LINK_GLUT = -L$(GLUT_DIR)/lib -Wl,-rpath,$(GLUT_DIR)/lib $(LINK_GLUT)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
  else
    SZG_LINK_GLUT = -lglut
    SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
  endif
 
  ifneq ($(strip $(INC_FMOD)),)
  ifneq ($(strip $(OBJ_FMOD)),)
    SZG_OPT_FLAGS += -DEnableSound
    SZG_SHARED_COPY += $(OBJ_FMOD)
    SZG_SHARED_COPY_ACTION += 
    SZG_INCLUDE_FMOD = -I$(INC_FMOD)
    SZG_OPT_INCLUDE_FULL += -I$(INC_FMOD)
    # -rpath lets shared libs be only in their compiled-in directories,
    # or in the local bin directory as well.
    SZG_LINK_FMOD = -L$(FMOD_DIR)/lib -Wl,-rpath,$(FMOD_DIR)/lib $(LINK_FMOD)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_FMOD)
  endif
  endif

  ifneq ($(strip $(INC_JPEG)),)
  ifneq ($(strip $(LIB_JPEG)),)
    SZG_OPT_FLAGS += -DEnableJPEG
    SZG_INCLUDE_JPEG = -I$(INC_JPEG)
    SZG_OPT_INCLUDE_FULL += -I$(INC_JPEG)
    SZG_LINK_JPEG = $(LIB_JPEG)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_JPEG)
  endif
  endif

  ifneq ($(strip $(INC_3DS)),)
  ifneq ($(strip $(LIB_3DS)),)
    SZG_OPT_FLAGS += -DEnable3DS
    SZG_INCLUDE_3DS = -I$(INC_3DS)
    SZG_OPT_INCLUDE_FULL += -I$(INC_3DS)
    SZG_LINK_3DS = $(LIB_3DS)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_3DS)
  endif
  endif

  ifneq  ($(strip $(INC_ZLIB)),)
  ifneq  ($(strip $(LIB_ZLIB)),) 
    # Only used in the Quake3 level viewer demos. Consequently, do not add
    # to everything.
    SZG_OPT_FLAGS += -DEnableZlib
    SZG_INCLUDE_ZLIB = -I$(INC_ZLIB)
    SZG_LINK_ZLIB = $(LIB_ZLIB)
  endif
  endif 

  ifneq ($(strip $(INC_VRPN)),)
  ifneq ($(strip $(LIB_VRPN)),)
    # NOTE: vrpn is only referenced in a arInputSource plugin.
    # Consequrntly, it should NOT be added to the full includes or full libs.
    SZG_OPT_FLAGS += -DEnable_VRPN
    SZG_INCLUDE_VRPN = -I$(INC_VRPN)
    SZG_LINK_VRPN = $(LIB_VRPN)
  endif
  endif

# Dropping the CG experiment, for the time being.
# Leave this comment plus those following so that things can be easily
# reconstructed, if desired.
#  INCCG := 
#  LIBCG := 
#  LIBCGGL :=

#  INCCG := $(wildcard $(SZGEXTERNAL)/include/Cg)
#  LIBCG := $(wildcard $(SZGEXTERNAL)/lib/Cg/linux/libCg.so)
#  LIBCGGL := $(wildcard $(SZGEXTERNAL)/lib/Cg/linux/libCgGL.so)
#  ifneq ($(strip $(INCCG)),)
#  ifneq ($(strip $(LIBCG)),)
#  ifneq ($(strip $(LIBCGGL)),)
#    # libCg include file AND library exist.
#    COMPILE_FLAGS += -DUSE_CG
#    COMPILE_FLAGS_DEBUG += -DUSE_CG
#    SZG_INCLUDE_CG = -I$(INCCG)
#    SZG_OPT_INCLUDE_FULL += -I$(INCCG)
#    SZG_OPT_LIBS_FULL += $(LIBCG) $(LIBCGGL)
#  endif
#  endif
#  endif

endif

ifeq ($(strip $(MACHINE)), WIN32)

#   If Python-building environment variables are not set, try
#   appropriate directories in SZGEXTERNAL
  ifeq ($(strip $(SZG_PYLIB)),)
		SZG_PYLIB := $(SZGEXTERNAL)/win32/Python24/libs/Python24.lib
		SZG_PYINCLUDE := $(SZGEXTERNAL)/win32/Python24/include
	endif

  STLPORT_DIR := $(SZGEXTERNAL)/win32/STLport
  LIB_STLPORT := $(wildcard $(STLPORT_DIR)/lib)
  OBJ1_STLPORT := $(wildcard $(STLPORT_DIR)/lib/stlport_vc646.dll)
  OBJ2_STLPORT := $(wildcard $(STLPORT_DIR)/lib/stlport_vc6_stldebug46.dll)

  ifeq ($(strip $(SZG_COMPILER)), MINGW)
    GLUT_DIR := $(SZGEXTERNAL)/win32/glut-3.7-mingw
    LINK_GLUT := -lglut32
  else
    GLUT_DIR := $(SZGEXTERNAL)/win32/glut-3.7-vc
    LINK_GLUT := glut32.lib
  endif
	INC_GLUT := $(wildcard $(GLUT_DIR)/include)
	OBJ_GLUT := $(wildcard $(GLUT_DIR)/lib/glut32.dll)
	
  # Some windows installations lack glext.h, which is needed for the
  # q33 demo. Allow it to be added in SZGEXTERNAL
  GL_EXT_DIR := $(wildcard $(SZGEXTERNAL)/win32/GL/include)

	FMOD_DIR := $(SZGEXTERNAL)/win32/fmod-4
	INC_FMOD := $(wildcard $(FMOD_DIR)/include)
	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		LINK_FMOD := -lfmodex
	else
		LINK_FMOD := $(wildcard $(FMOD_DIR)/lib/fmodex_vc.lib)
	endif
	OBJ_FMOD := $(wildcard $(FMOD_DIR)/lib/fmodex.dll)

	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		JPEG_DIR := $(SZGEXTERNAL)/win32/jpeg-mingw
		LIB_JPEG := $(wildcard $(JPEG_DIR)/lib/libjpeg.a)
	else
	  ifeq ($(strip $(SZG_COMPILER)), VC7)
			JPEG_DIR := $(SZGEXTERNAL)/win32/jpeg-vc7
		else
			JPEG_DIR := $(SZGEXTERNAL)/win32/jpeg-vc6
		endif
		LIB_JPEG := $(wildcard $(JPEG_DIR)/lib/libjpeg.lib)
  endif
	INC_JPEG := $(wildcard $(JPEG_DIR)/include)

	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		3DS_DIR := $(SZGEXTERNAL)/win32/lib3ds-mingw
		INC_3DS := $(wildcard $(3DS_DIR)/include)
		LIB_3DS := $(wildcard $(3DS_DIR)/lib/lib3ds.a)
		LINK_3DS := -l3ds
	else
		3DS_DIR := $(SZGEXTERNAL)/win32/lib3ds-msvc
		INC_3DS := $(wildcard $(3DS_DIR)/include)
		LIB_3DS := $(wildcard $(3DS_DIR)/lib/lib3ds.lib)
	endif

	SAPI_DIR := $(SZGEXTERNAL)/win32/sapi-5.1
	INC_SAPI := $(wildcard $(SAPI_DIR)/include)
	LIB_SAPI := $(wildcard $(SAPI_DIR)/lib/sapi.lib)
	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		LINK_SAPI := -lole32 -lsapi
	endif

	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		ZLIB_DIR := $(SZGEXTERNAL)/win32/zlib-mingw
		LIB_ZLIB := $(wildcard $(ZLIB_DIR)/lib/libz.a)
	else
		ZLIB_DIR := $(SZGEXTERNAL)/win32/zlib-vc
		LIB_ZLIB := $(wildcard $(ZLIB_DIR)/lib/zlib.lib)
  endif
	INC_ZLIB := $(wildcard $(ZLIB_DIR)/include)

	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		WIN_BIRD_DIR := $(SZGEXTERNAL)/win32/ascension-mingw
		INC_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/include)
		LIB_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/lib/libBird.a)
		LINK_WIN_BIRD := -lBird
		OBJ_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/lib/Bird.dll)
	else
		WIN_BIRD_DIR := $(SZGEXTERNAL)/win32/ascension-msvc
		INC_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/include)
		LIB_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/lib/Bird.lib)
		OBJ_WIN_BIRD := $(wildcard $(WIN_BIRD_DIR)/lib/Bird.dll)
	endif
	# possible confusion if win32/ascension exists instead of one of these two

	ifeq ($(strip $(SZG_COMPILER)), MINGW)
		5DT_DIR := $(SZGEXTERNAL)/win32/5DT-mingw
		INC_5DT := $(wildcard $(5DT_DIR)/include)
		LIB_5DT := $(wildcard $(5DT_DIR)/lib/libfglove.a)
		LINK_5DT := -lfglove
		OBJ_5DT := $(wildcard $(5DT_DIR)/dll/fglove.dll)
	else
		5DT_DIR := $(SZGEXTERNAL)/win32/5DT-msvc
		INC_5DT := $(wildcard $(5DT_DIR)/include)
		LIB_5DT := $(wildcard $(5DT_DIR)/lib/fglove.lib)
		OBJ_5DT := $(wildcard $(5DT_DIR)/dll/fglove.dll)
	endif

  EVART_DIR := $(SZGEXTERNAL)/win32/evart
  INC_EVART := $(wildcard $(EVART_DIR)/include)
  LIB_EVART := $(wildcard $(EVART_DIR)/lib/macrtcom.lib)
  OBJ_EVART := $(wildcard $(EVART_DIR)/lib/macrtcom.dll)

  ISENSE_DIR := $(SZGEXTERNAL)/win32/isense
  OBJ_ISENSE := $(wildcard $(ISENSE_DIR)/lib/isense.dll)

  # If the isense dll is available, copy its objects to SZG_BINDIR
  # in the install-shared target.
  ifneq ($(strip $(OBJ_ISENSE)),)
    SZG_SHARED_COPY += $(OBJ_ISENSE)
  endif

  # If STLport is available, copy its objects to SZG_BINDIR
  # in the install-shared target.
  ifneq ($(strip $(LIB_STLPORT)),)
    SZG_SHARED_COPY += $(OBJ1_STLPORT) $(OBJ2_STLPORT)
  endif

  # Only GLUT gets a default link and include value.  The latter is blank,
  # since most GLUT installations put .h files in the default include path.

  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    ifneq ($(strip $(OBJ_GLUT)),)
      SZG_SHARED_COPY += $(OBJ_GLUT)
      SZG_INCLUDE_GLUT = -I$(INC_GLUT)
      SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
      # Windows needs no
      # runtime paths for executables, so SZG_LINK_GLUT is simpler.
      SZG_LINK_GLUT = $(GLUT_DIR)/lib/$(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    else
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    endif
  else
    ifneq ($(strip $(OBJ_GLUT)),)
      SZG_SHARED_COPY += $(OBJ_GLUT)
      SZG_INCLUDE_GLUT = -I$(INC_GLUT)
      SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
      # Windows needs no
      # runtime paths for executables, so SZG_LINK_GLUT is simpler.
      # HOWEVER, with MinGW ensure that the linker finds our
      # libglut32.a _before_ it finds the glut32.dll in szg/bin/win32, or
      # it will attempt to link against that and barf at the lack of
      # @<numbytes> at the end of each function name. So make
      # sure that the appropriate linker path gets added _early_.
      PRE_LIB_SEARCH_FLAGS += -L$(GLUT_DIR)/lib
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    else
      PRE_LIB_SEARCH_FLAGS += -L$(GLUT_DIR)/lib
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    endif
  endif

  # Inclusion of glext.h for q33
  ifneq ($(strip $(GL_EXT_DIR)),)
    SZG_OPT_INCLUDE_FULL += -I$(GL_EXT_DIR)
  endif
	
  ifneq ($(strip $(INC_FMOD)),)
  ifneq ($(strip $(LINK_FMOD)),)
			SZG_OPT_FLAGS += -D "EnableSound"
			SZG_SHARED_COPY += $(OBJ_FMOD)
			SZG_INCLUDE_FMOD = -I$(INC_FMOD)
			SZG_OPT_INCLUDE_FULL += -I$(INC_FMOD)
			SZG_LINK_FMOD = $(LINK_FMOD) 
			SZG_OPT_LIBS_FULL += $(SZG_LINK_FMOD)
			ifeq ($(strip $(SZG_COMPILER)), MINGW)
				PRE_LIB_SEARCH_FLAGS += -L$(FMOD_DIR)/lib
			endif
  endif
  endif

  ifneq ($(strip $(INC_JPEG)),)
  ifneq ($(strip $(LIB_JPEG)),)
    ifneq ($(strip $(SZG_COMPILER)), MINGW)
      SZG_OPT_FLAGS += -D "EnableJPEG"
      SZG_INCLUDE_JPEG = -I$(INC_JPEG)
      SZG_OPT_INCLUDE_FULL += -I$(INC_JPEG)
      SZG_LINK_JPEG = $(LIB_JPEG)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_JPEG)
    else 
      SZG_OPT_FLAGS += -D "EnableJPEG"
      SZG_INCLUDE_JPEG = -I$(INC_JPEG)
      SZG_OPT_INCLUDE_FULL += -I$(INC_JPEG)
      PRE_LIB_SEARCH_FLAGS += -L$(JPEG_DIR)/lib
      SZG_LINK_JPEG = -ljpeg
      SZG_OPT_LIBS_FULL += $(SZG_LINK_JPEG)
    endif
  endif
  endif

  ifneq ($(strip $(INC_3DS)),)
  ifneq ($(strip $(LIB_3DS)),)
    # lib3DS include file AND library exist.
    SZG_OPT_FLAGS += -D "Enable3DS"
    SZG_INCLUDE_3DS = -I$(INC_3DS)
    SZG_OPT_INCLUDE_FULL += -I$(INC_3DS)
  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    SZG_LINK_3DS = $(LIB_3DS)
	else
    PRE_LIB_SEARCH_FLAGS += -L$(3DS_DIR)/lib
    SZG_LINK_3DS = $(LINK_3DS)
	endif
    SZG_OPT_LIBS_FULL += $(SZG_LINK_3DS)
  endif
  endif

  ifneq ($(strip $(INC_SAPI)),)
  ifneq ($(strip $(LIB_SAPI)),)
    SZG_OPT_FLAGS += -D "EnableSpeech"
    SZG_INCLUDE_SAPI = -I$(INC_SAPI)
    SZG_OPT_INCLUDE_FULL += -I$(INC_SAPI)
  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    SZG_LINK_SAPI = ole32.lib $(LIB_SAPI)
	else
    PRE_LIB_SEARCH_FLAGS += -L$(SAPI_DIR)/lib
    SZG_LINK_SAPI = $(LINK_SAPI)
	endif
    SZG_OPT_LIBS_FULL += $(SZG_LINK_SAPI)
  endif
  endif

  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    ifneq ($(strip $(OBJ_GLUT)),)
      SZG_SHARED_COPY += $(OBJ_GLUT)
      SZG_INCLUDE_GLUT = -I$(INC_GLUT)
      SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
      # Windows needs no
      # runtime paths for executables, so SZG_LINK_GLUT is simpler.
      SZG_LINK_GLUT = $(GLUT_DIR)/lib/$(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    else
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    endif
  else
    ifneq ($(strip $(OBJ_GLUT)),)
      SZG_SHARED_COPY += $(OBJ_GLUT)
      SZG_INCLUDE_GLUT = -I$(INC_GLUT)
      SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
      # Windows needs no
      # runtime paths for executables, so SZG_LINK_GLUT is simpler.
      # HOWEVER, with MinGW ensure that the linker finds our
      # libglut32.a _before_ it finds the glut32.dll in szg/bin/win32, or
      # it will attempt to link against that and barf at the lack of
      # @<numbytes> at the end of each function name. So make
      # sure that the appropriate linker path gets added _early_.
      PRE_LIB_SEARCH_FLAGS += -L$(GLUT_DIR)/lib
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    else
      PRE_LIB_SEARCH_FLAGS += -L$(GLUT_DIR)/lib
      SZG_LINK_GLUT = $(LINK_GLUT)
      SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
    endif
  endif

  ifneq  ($(strip $(INC_ZLIB)),)
  ifneq  ($(strip $(LIB_ZLIB)),) 
    ifneq ($(strip $(SZG_COMPILER)), MINGW)
      # Only used in the Quake3 level viewer demos. Consequently, do not add
      # to everything.
      SZG_OPT_FLAGS += -D "EnableZlib"
      SZG_INCLUDE_ZLIB = -I$(INC_ZLIB)
      SZG_LINK_ZLIB = $(LIB_ZLIB)
    else
      SZG_OPT_FLAGS += -D "EnableZlib"
      SZG_INCLUDE_ZLIB = -I$(INC_ZLIB)
      SZG_LINK_ZLIB = -lz
      PRE_LIB_SEARCH_FLAGS += -L$(ZLIB_DIR)/lib
    endif
  endif
  endif

# NOTE: This only applies to one of the dynamically loadable input drivers.
# Hence it does not add anything to the global link lines/includes.
  ifneq ($(strip $(INC_WIN_BIRD)),)
  ifneq ($(strip $(LIB_WIN_BIRD)),)
    SZG_OPT_FLAGS += -D "EnableBirdWinDriver"
    SZG_SHARED_COPY += $(OBJ_WIN_BIRD)
    SZG_INCLUDE_WIN_BIRD = -I$(INC_WIN_BIRD)
  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    SZG_LINK_WIN_BIRD = $(LIB_WIN_BIRD)
	else
    SZG_PRE_LIB_SEARCH_FLAGS_WIN_BIRD = -L$(WIN_BIRD_DIR)/lib
    SZG_LINK_WIN_BIRD = $(LINK_WIN_BIRD)
	endif
  endif
  endif

  ifneq ($(strip $(INC_5DT)),)
  ifneq ($(strip $(LIB_5DT)),)
    # 5DT include file AND library exist.
    SZG_OPT_FLAGS += -D "Enable5DT"
    SZG_SHARED_COPY += $(OBJ_5DT)
    SZG_INCLUDE_5DT = -I$(INC_5DT)
  ifneq ($(strip $(SZG_COMPILER)), MINGW)
    SZG_LINK_5DT = $(LIB_5DT)
	else
    SZG_PRE_LIB_SEARCH_FLAGS_5DT = -L$(5DT_DIR)/lib
    SZG_LINK_5DT = $(LINK_5DT)
	endif
  endif
  endif


# NOTE: This only applies to one of the dynamically loadable input drivers.
# Hence it does not add anything to the global link lines/includes.
  ifneq ($(strip $(INC_EVART)),)
  ifneq ($(strip $(LIB_EVART)),)
    SZG_OPT_FLAGS += -D "EnableEVaRT"
    SZG_SHARED_COPY += $(OBJ_EVART)
    SZG_INCLUDE_EVART = -I$(INC_EVART)
    SZG_LINK_EVART = $(LIB_EVART)
  endif
  endif

# Dropping the CG experiment, for the time being.
#  INCCG := 
#  LIBCG := 
#  LIBCGGL :=
#
#  INCCG := $(wildcard $(SZGEXTERNAL)/include/Cg)
#  LIBCG := $(wildcard $(SZGEXTERNAL)/lib/Cg/win32/libCg.lib)
#  LIBCGGL := $(wildcard $(SZGEXTERNAL)/lib/Cg/win32/libCgGL.lib)
#
#  ifneq ($(strip $(INCCG)),)
#  ifneq ($(strip $(LIBCG)),)
#  ifneq ($(strip $(LIBCGGL)),)
#    COMPILE_FLAGS += -D "USE_CG"
#    COMPILE_FLAGS_DEBUG += -D "USE_CG"
#    SZG_INCLUDE_CG = -I$(INCCG)
#    SZG_OPT_INCLUDE_FULL += -I$(INCCG)
#    SZG_OPT_LIBS_FULL += $(LIBCG) $(LIBCGGL)
#  endif
#  endif
#  endif

endif

ifeq ($(strip $(MACHINE)), DARWIN)

	SZG_LINK_PYTHON := $(SZG_PYLIB)

	FMOD_DIR := $(SZGEXTERNAL)/darwin/fmod-4
	INC_FMOD := $(wildcard $(FMOD_DIR)/include)
	LINK_FMOD := $(wildcard $(FMOD_DIR)/lib/libfmodex.dylib)

  JPEG_DIR := $(SZGEXTERNAL)/darwin/jpeg
  INC_JPEG := $(wildcard $(JPEG_DIR)/include)
  LIB_JPEG := $(wildcard $(JPEG_DIR)/lib/libjpeg.a)

  ifneq ($(strip $(INC_FMOD)),)
  ifneq ($(strip $(LINK_FMOD)),)
    SZG_OPT_FLAGS += -DEnableSound
    SZG_INCLUDE_FMOD = -I$(INC_FMOD)
    SZG_OPT_INCLUDE_FULL += -I$(INC_FMOD)
    SZG_LINK_FMOD = $(LINK_FMOD) -framework Carbon
    SZG_OPT_LIBS_FULL += $(SZG_LINK_FMOD)
  endif
  endif

  ifneq ($(strip $(INC_JPEG)),)
  ifneq ($(strip $(LIB_JPEG)),)
    SZG_OPT_FLAGS += -DEnableJPEG
    SZG_INCLUDE_JPEG = -I$(INC_JPEG)
    SZG_OPT_INCLUDE_FULL += -I$(INC_JPEG)
    SZG_LINK_JPEG = $(LIB_JPEG)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_JPEG)
  endif
  endif

  # zlib is only used for the Quake 3 level viewer demos. Furthermore,
  # this library is standard with OS X. Consequently, don't even bother
  # to check for its existence.
  SZG_INCLUDE_ZLIB =
  SZG_LINK_ZLIB = -lz

endif

ifeq ($(strip $(MACHINE)), SGI)

	SZG_LINK_PYTHON := $(SZG_PYLIB)
	
  # If glut is in SZGEXTERNAL, use that.
  # Otherwise, assume everything is in the standard locations.

  GLUT_DIR := $(SZGEXTERNAL)/sgi/glut-3.7
  INC_GLUT := $(wildcard $(GLUT_DIR)/include)
  LIB_GLUT := $(wildcard $(GLUT_DIR)/lib/libglut.a)

  ifneq ($(strip $(LIB_GLUT)),)
    SZG_INCLUDE_GLUT = -I$(INC_GLUT)
    SZG_OPT_INCLUDE_FULL += $(SZG_INCLUDE_GLUT)
    SZG_LINK_GLUT = $(LIB_GLUT)
    SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
  else
    SZG_LINK_GLUT = -lglut
    SZG_OPT_LIBS_FULL += $(SZG_LINK_GLUT)
  endif
  
endif
