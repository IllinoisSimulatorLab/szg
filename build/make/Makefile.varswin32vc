MACHINE_DIR = win32
# NOTE: The copy-to-bin-directory now occurs either automatically when
# an executable (or the library) is recompiled (for each such individually).
# It can also occur upon a manually given copy request (in which case
# everything is rebuilt (if necessary as determined by make) then copied.
CP = cp

# suffixes
OBJ_SUFFIX = .obj
DLL_SUFFIX = .dll
LIB_SUFFIX = .lib
PLUGIN_SUFFIX = .dll
STATIC_SUFFIX=.lib
EXE = .exe

# compilation
COMPILER = cl
COMMON_COMPILE_FLAGS = -nologo -c -w -W0 -G6 -GX -D "_MBCS" \
 -D "AR_USE_WIN_32" $(SZG_OPT_FLAGS)
# If using STLport (to improve Visual Studio 6's STL), make it support multithreading.
ifeq ($(strip $(SZG_STLPORT)),TRUE)
  COMMON_COMPILE_FLAGS+= -D "_REENTRANT"
endif
ifneq ($(strip $(PROGRAMW6432)),)
  # For WinXP 64bit with 32-bit C++ compiler v12.00.8168.
  # Testing PROGRAMW6432's existence is a kluge.
  COMMON_COMPILE_FLAGS+= -D "AR_USE_WIN_64"
endif

# The location of the precompiled header. Using this speeds up windows builds
# by a substantial margin. This is another place where we assume SZGHOME
# has been defined. NOTE: It is, indeed, possible to use precompiled
# headers with your "EASY" projects.
ifneq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  PRECOMPILED_HEADER_USAGE = -YuarPrecompiled.h \
    -Fp$(SZGHOME)/build/win32/language/arPrecompiled.pch
else
  PRECOMPILED_HEADER_USAGE = -YuarPrecompiled.h \
    -Fp$(SZGHOME)/build/pch/arPrecompiled.pch
endif

# The default.
PRECOMPILED_HEADER_FLAGS = $(PRECOMPILED_HEADER_USAGE)

# Sometimes we want to NOT have precompiled headers! (For instance, if
# we need to compile against a library built with a *slightly* different
# compiler (i.e. just a patch level away) OR if we need to compile 
# something debug while linking it with object files compiled nondebug.
PRECOMPILED_HEADER_DISABLE = -YX

# If SZG_DEVELOPER_STYLE is EASY, then we will compile WITHOUT using
# precompiled headers.
ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  PRECOMPILED_HEADER_FLAGS = $(PRECOMPILED_HEADER_DISABLE)
endif

# It is possible to over-ride the defaults by setting SZG_USE_PCH
ifeq ($(strip $(SZG_USE_PCH)),TRUE)
  PRECOMPILED_HEADER_FLAGS = $(PRECOMPILED_HEADER_USAGE)
else
ifeq ($(strip $(SZG_USE_PCH)),FALSE)
  PRECOMPILED_HEADER_FLAGS = $(PRECOMPILED_HEADER_DISABLE)
endif
endif

# We are using the "dll" libc. This is essential vis-a-vis because of szg's
# dll-centricity. NOTE: AR_USED_SHARED must be defined to get the 
# __declspec(dllexport) that builds the export libraries.
# NOTE: Windows requires the compiler receive information about 
# linker when creating object files. Hence, the "HYBRID_FLAGS" moniker...
ifeq ($(strip $(SZG_LINKING)), STATIC) 
  HYBRID_FLAGS_DEBUG = -MTd -D "AR_LINKING_STATIC"
  HYBRID_FLAGS_NDEBUG = -MT -D "AR_LINKING_STATIC"
else
  HYBRID_FLAGS_DEBUG = -MDd -D "AR_USE_SHARED"
  HYBRID_FLAGS_NDEBUG = -MD -D "AR_USE_SHARED"
endif
OPT_FLAGS_DEBUG = -D "_CONSOLE" -O1 -D "_DEBUG" $(HYBRID_FLAGS_DEBUG)
OPT_FLAGS_NDEBUG = -D "_CONSOLE" -O2 -D "NDEBUG" $(HYBRID_FLAGS_NDEBUG)
# If we are using STLport, this include must come first to override the
# standard Visual C++ includes.
ifeq ($(strip $(SZG_STLPORT)),TRUE)
  OPT_FLAGS_DEBUG += -I$(SZGEXTERNAL)/win32/STLport/stlport
  OPT_FLAGS_NDEBUG += -I$(SZGEXTERNAL)/win32/STLport/stlport
endif

# NOTE: The default set of OPT_FLAGS
ifeq ($(strip $(SZGDEBUG)),TRUE)
  OPT_FLAGS = $(OPT_FLAGS_DEBUG)
else
  OPT_FLAGS = $(OPT_FLAGS_NDEBUG)
endif

# How the precompiled header is produced. This is different for "EASY"
# and "DEVELOPER" styles of packaging the code.
ifneq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  PRECOMPILED_HEADER_LINE = $(COMPILER) $(COMMON_COMPILE_FLAGS) \
    $(OPT_FLAGS) -Yc -FparPrecompiled.pch \
    ../../../src/language/arPrecompiled.cpp 
else
  PRECOMPILED_HEADER_LINE = $(COMPILER) $(COMMON_COMPILE_FLAGS) \
    $(OPT_FLAGS) -Yc -FparPrecompiled.pch pch/arPrecompiled.cpp 
endif

# These are explicitly defined since sometimes we want something besides
# the default.
COMPILE_FLAGS_DEBUG =  $(COMMON_COMPILE_FLAGS) \
 $(OPT_FLAGS_DEBUG) $(PRECOMPILED_HEADER_FLAGS)
COMPILE_FLAGS_NDEBUG = $(COMMON_COMPILE_FLAGS) \
 $(OPT_FLAGS_NDEBUG) $(PRECOMPILED_HEADER_FLAGS)

# Here is the standard set of compile flags that will be used in compiling
# the objects for the library.
COMPILE_FLAGS = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS) \
 $(PRECOMPILED_HEADER_FLAGS)

COMPILE_FLAGS_SHARED = $(COMMON_COMPILE_FLAGS) $(OPT_FLAGS)

ifneq ($(strip $(SZGDEBUG)),TRUE)
  OPTIMIZE_FLAG = -O2
else
  OPTIMIZE_FLAG = 
endif

# The flags and other definitions pertaining to linking.
LINKER = link
STATIC_LINKER = LIB
LINK_PREFIX = -out:
# There are several categories of libraries.
GENERAL_LIBS = advapi32.lib kernel32.lib user32.lib gdi32.lib Ws2_32.lib
# NOTE: glut is now added in Makefile.libscan, so that we can do without
# installing it (and make use of such in SZGEXTERNAL) if such is desired.
GRAPHICS_LIBS = opengl32.lib glu32.lib
GAMEPAD_LIBS = dinput.lib dxguid.lib
# We want to be able to NOT do a console-based app if necessary
SZG_SUBSYSTEM = -subsystem:console
ifeq ($(strip $(SZG_LINKING)), STATIC) 
  SZG_NO_DEFAULT_LIB = -NODEFAULTLIB:MSVCRT.LIB -NODEFAULTLIB:MSVCRTD.LIB
  SZG_NO_DEFAULT_LIB_DEBUG = -NODEFAULTLIB:LIBCMT.LIB
  SZG_NO_DEFAULT_LIB_NDEBUG = -NODEFAULTLIB:LIBCMTD.LIB 
else
  SZG_NO_DEFAULT_LIB = -NODEFAULTLIB:LIBCMT.LIB -NODEFAULTLIB:LIBCMTD.LIB
  SZG_NO_DEFAULT_LIB_DEBUG = -NODEFAULTLIB:MSVCRT.LIB
  SZG_NO_DEFAULT_LIB_NDEBUG = -NODEFAULTLIB:MSVCRTD.LIB 
endif
LINK_FLAGS_BASE = -nologo $(SZG_SUBSYSTEM) -incremental:no \
 $(SZG_NO_DEFAULT_LIB)
LINK_FLAGS_SHARED_BASE = -nologo -incremental:no -dll \
 $(SZG_NO_DEFAULT_LIB)
ifeq ($(strip $(SZG_STLPORT)),TRUE)
  LINK_FLAGS_BASE += /libpath:$(SZGEXTERNAL)/win32/STLport/lib
  LINK_FLAGS_SHARED_BASE += /libpath:$(SZGEXTERNAL)/win32/STLport/lib
endif
LINK_FLAGS_DEBUG = $(LINK_FLAGS_BASE) $(SZG_NO_DEFAULT_LIB_DEBUG) \
 -debug 
LINK_FLAGS_SHARED_DEBUG = $(LINK_FLAGS_SHARED_BASE) \
 $(SZG_NO_DEFAULT_LIB_DEBUG) -debug
# The default is no debugging
LINK_FLAGS = $(LINK_FLAGS_BASE) $(SZG_NO_DEFAULT_LIB_NDEBUG)
LINK_FLAGS_SHARED = $(LINK_FLAGS_SHARED_BASE) $(SZG_NO_DEFAULT_LIB_NDEBUG)
ifeq ($(strip $(SZGDEBUG)),TRUE)
  LINK_FLAGS = $(LINK_FLAGS_DEBUG)
  LINK_FLAGS_SHARED = $(LINK_FLAGS_SHARED_DEBUG)
endif
LINK_FLAGS_PLUGIN = $(LINK_FLAGS_SHARED)

PRE_LINK_LINE_LIB=$(SZG_LIBRARY_LIBS) $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)
POST_LINK_LINE_LIB=

PRE_LINK_LINE_EXE=$(SZG_CURRENT_LIB) $(SZG_LIBRARY_LIBS) \
  $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)
POST_LINK_LINE_EXE =

PRE_LINK_LINE_USR=$(SZG_LIBRARY_LIBS) $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)
POST_LINK_LINE_USR=

# Windows: reference libs directly.
# Unix: reference libs INDIRECTLY (e.g., -larLanguage).

ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  LANGUAGE_LIB_STRING=$(SZGHOME)/lib/libarLanguage$(SZG_STATIC_MOD).lib
  PHLEET_LIB_STRING=$(SZGHOME)/lib/libarPhleet$(SZG_STATIC_MOD).lib
  BARRIER_LIB_STRING=$(SZGHOME)/lib/libarBarrier$(SZG_STATIC_MOD).lib
  MATH_LIB_STRING=$(SZGHOME)/lib/libarMath$(SZG_STATIC_MOD).lib
  DRIVERS_LIB_STRING=$(SZGHOME)/lib/libarDrivers$(SZG_STATIC_MOD).lib
  GRAPHICS_LIB_STRING=$(SZGHOME)/lib/libarGraphics$(SZG_STATIC_MOD).lib
  SOUND_LIB_STRING=$(SZGHOME)/lib/libarSound$(SZG_STATIC_MOD).lib
  OBJECT_LIB_STRING=$(SZGHOME)/lib/libarObject$(SZG_STATIC_MOD).lib
  INTERACT_LIB_STRING=$(SZGHOME)/lib/libarInteraction$(SZG_STATIC_MOD).lib
  FRAMEWORK_LIB_STRING=$(SZGHOME)/lib/libarFramework$(SZG_STATIC_MOD).lib
else
  LANGUAGE_LIB_STRING=$(SZGHOME)/build/win32/language/libarLanguage$(SZG_STATIC_MOD).lib
  PHLEET_LIB_STRING=$(SZGHOME)/build/win32/phleet/libarPhleet$(SZG_STATIC_MOD).lib
  BARRIER_LIB_STRING=$(SZGHOME)/build/win32/barrier/libarBarrier$(SZG_STATIC_MOD).lib
  MATH_LIB_STRING=$(SZGHOME)/build/win32/math/libarMath$(SZG_STATIC_MOD).lib
  DRIVERS_LIB_STRING=$(SZGHOME)/build/win32/drivers/libarDrivers$(SZG_STATIC_MOD).lib
  GRAPHICS_LIB_STRING=$(SZGHOME)/build/win32/graphics/libarGraphics$(SZG_STATIC_MOD).lib
  SOUND_LIB_STRING=$(SZGHOME)/build/win32/sound/libarSound$(SZG_STATIC_MOD).lib
  OBJECT_LIB_STRING=$(SZGHOME)/build/win32/obj/libarObject$(SZG_STATIC_MOD).lib
  INTERACT_LIB_STRING=$(SZGHOME)/build/win32/interaction/libarInteraction$(SZG_STATIC_MOD).lib
  FRAMEWORK_LIB_STRING=$(SZGHOME)/build/win32/framework/libarFramework$(SZG_STATIC_MOD).lib
endif

RANLIB = @echo
