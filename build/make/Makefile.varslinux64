# Horrible copypaste from Makefile.varslinux

# Linux variables

MACHINE_DIR = linux64

# Whenever an exe or dll is built, it's automatically copied.
# Avoid "cp -u", which suffers from clock drift across smb.
CP = cp

# Suffixes unique to the platform.
OBJ_SUFFIX = .o
DLL_SUFFIX=.so
LIB_SUFFIX=.so
PLUGIN_SUFFIX=.so
STATIC_SUFFIX=.a
EXE = 

# General info regarding compiling such as flags for the various build styles.
# -fPIC because we build DLLs.
COMPILER = g++
COMPILE_FLAGS_NDEBUG = -DAR_USE_LINUX -c -fPIC -Wall -W -Wpointer-arith -O2 $(SZG_OPT_FLAGS)
COMPILE_FLAGS_DEBUG  = -DAR_USE_LINUX -c -fPIC -Wall -W -Wpointer-arith -DAR_USE_DEBUG -g $(SZG_OPT_FLAGS)
# Do NOT use ":=" in defining COMPILE_FLAGS,
# for flexibility in where SZG_OPT_FLAGS is defined.
ifneq ($(strip $(SZGDEBUG)),TRUE)
  COMPILE_FLAGS = $(COMPILE_FLAGS_NDEBUG)
else
  COMPILE_FLAGS = $(COMPILE_FLAGS_DEBUG)
endif
# On 64bit ubuntu ibex, sudo ln -s /usr/lib/libGL.so.1 /usr/lib/libGL.so
COMPILE_FLAGS += -m64

COMPILE_FLAGS_SHARED = $(COMPILE_FLAGS)

ifneq ($(strip $(SZGDEBUG)),TRUE)
  OPTIMIZE_FLAG = -O3
else
  OPTIMIZE_FLAG = 
endif

# Hide the fact that unix needs no precompiled headers.
PRECOMPILED_HEADER_LINE := \
  $(CP) ../../../src/language/arPrecompiled.cpp arPrecompiled$(OBJ_SUFFIX)

# General settings regarding linking, such as flags and libraries.
LINKER = g++
STATIC_LINKER = ar -r
LINK_PREFIX = 
LINK_FLAGS = -o
LINK_FLAGS_DEBUG = $(LINK_FLAGS)
LINK_FLAGS_SHARED = -shared -o
LINK_FLAGS_PLUGIN = -shared -o
GENERAL_LIBS = -ldl -lpthread -lm
# NOTE: glut does not appear below but is instead dealt with in
# Makefile.libscan (we might not want to install a glut, but instead
# use one from SZGEXTERNAL)
GRAPHICS_LIBS = -lGLU -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi -lSM -lICE
GAMEPAD_LIBS =

# Flags for library search depend on if the build style is EASY.
# If so, in addition to changing the compile-time search location,
# do not add a runtime path. Because the built-in runtime search paths will
# be unhelpful (libarPhleet.so will search for libarLanguage.so on its
# location for the developer who compiled the libraries), it is no extra
# burden to make the user set LD_LIBRARY_PATH, N32_LIBRARY_PATH, etc.
ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  LIB_SEARCH_FLAGS=-L$(SZGHOME)/bin
else
  LIB_SEARCH_FLAGS=-L$(SZG_BINDIR) -Wl,-rpath,$(SZG_BINDIR)
endif

# These link the libs (i.e. libarLanguage$(DLL_SUFFIX), etc.)
PRE_LINK_LINE_LIB= 
POST_LINK_LINE_LIB=$(LIB_SEARCH_FLAGS) $(SZG_LIBRARY_LIBS) \
  $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)

# FOr exes that only depend on intermediate stages of the build.
# (for instance szgserver, szgrender). Since these are built out
# of an "intermediate" Makefile, they must link with the lib built
# via that Makefile (given by SZG_CURRENT_LIB_MOD_NAME) AND the
# cumulative libs that it depends upon.
PRE_LINK_LINE_EXE= 
POST_LINK_LINE_EXE= $(LIB_SEARCH_FLAGS) -l$(SZG_CURRENT_LIB_MOD_NAME) \
  $(SZG_LIBRARY_LIBS) $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)

# For "user"-built exes that use all Syzygy's shared libraries.
PRE_LINK_LINE_USR= 
POST_LINK_LINE_USR= $(LIB_SEARCH_FLAGS) $(SZG_LIBRARY_LIBS) \
  $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)

# Libs are referenced differently in windows and unix.
LANGUAGE_LIB_STRING = -larLanguage$(SZG_STATIC_MOD)
PHLEET_LIB_STRING = -larPhleet$(SZG_STATIC_MOD)
BARRIER_LIB_STRING = -larBarrier$(SZG_STATIC_MOD)
MATH_LIB_STRING = -larMath$(SZG_STATIC_MOD)
DRIVERS_LIB_STRING = -larDrivers$(SZG_STATIC_MOD)
GRAPHICS_LIB_STRING = -larGraphics$(SZG_STATIC_MOD)
SOUND_LIB_STRING = -larSound$(SZG_STATIC_MOD)
OBJECT_LIB_STRING = -larObject$(SZG_STATIC_MOD)
INTERACT_LIB_STRING = -larInteraction$(SZG_STATIC_MOD)
FRAMEWORK_LIB_STRING = -larFramework$(SZG_STATIC_MOD)

RANLIB = @echo
