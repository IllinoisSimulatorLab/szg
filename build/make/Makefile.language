VPATH = ../../../src/language

# DO NOT use tabs to indent for OBJS and MYLIBS. gmake can be unhappy
# with this sometimes.
OBJS = \
  arRS232Port$(OBJ_SUFFIX) \
  arDatabaseLanguage$(OBJ_SUFFIX) \
  arDatabaseNode$(OBJ_SUFFIX) \
  arDatabase$(OBJ_SUFFIX) \
  arDataPoint$(OBJ_SUFFIX) \
  arDataClient$(OBJ_SUFFIX) \
  arDataServer$(OBJ_SUFFIX) \
  arDataTemplate$(OBJ_SUFFIX) \
  arDataUtilities$(OBJ_SUFFIX) \
  arLanguage$(OBJ_SUFFIX) \
  arLightFloatBuffer$(OBJ_SUFFIX) \
  arQueuedData$(OBJ_SUFFIX) \
  arSharedLib$(OBJ_SUFFIX) \
  arSocket$(OBJ_SUFFIX) \
  arStructuredDataParser$(OBJ_SUFFIX) \
  arStructuredData$(OBJ_SUFFIX) \
  arTemplateDictionary$(OBJ_SUFFIX) \
  arSocketTextStream$(OBJ_SUFFIX) \
  arFileTextStream$(OBJ_SUFFIX) \
  arXMLUtilities$(OBJ_SUFFIX) \
  arThread$(OBJ_SUFFIX) \
  arUDPSocket$(OBJ_SUFFIX) \
  arSocketAddress$(OBJ_SUFFIX)

# Local variable definitions for the build.
MYLIBNAME = arLanguage
MYLIB = $(MYLIBNAME)$(LIB_SUFFIX)
# These internal library makefiles ONLY include the external files necessary
# to build the library. (SZG_INCLUDE_STYLE is set to INTERNAL, so 
# Makefile.defines neglects to define these)
SZG_INCLUDE = 

ALL =   $(MYLIB) \
        RS232EchoTest$(EXE) \
	RS232SendTest$(EXE) \
	TestLanguageClient$(EXE) \
	TestLanguage$(EXE)  \
	TestLanguageServer$(EXE)

# NOTE: "Everything" is the magic target name used by subsidiary targets
# like "clean" and "create-install" (which puts all the 
Everything: $(ALL)

# NOTE: We MUST compile the 
$(MYLIB): arPrecompiled$(OBJ_SUFFIX) $(OBJS)
	$(
	$(COPY)

# This should go AFTER our FIRST target (because Makefile.rules includes
include $(SZGHOME)/build/make/Makefile.rules

# note that originally, every object in this directory was optimized to
# the maximum level. However, now, in the interests of stability, lets
# try only heavily optimizing the raw-information-handling objects.
# note that the optimization scheme was as follows:
#COMPILE_FLAGS += $(OPTIMIZE_FLAG)
# ... and we would not have any explict object compilation rules as below

arDataTemplate$(OBJ_SUFFIX): arDataTemplate.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arDataUtilities$(OBJ_SUFFIX): arDataUtilities.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arLightFloatBuffer$(OBJ_SUFFIX): arLightFloatBuffer.cpp 
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arQueuedData$(OBJ_SUFFIX): arQueuedData.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arStructuredData$(OBJ_SUFFIX): arStructuredData.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

# must override the standard obj compilation with a precompiled header
# specific one. note this does nothing meaningful on platforms besides windows
arPrecompiled$(OBJ_SUFFIX): arPrecompiled.cpp
	$(PRECOMPILED_HEADER_LINE)

# Note how we go ahead and over-ride the standard .cpp rule (as we must,
# since that is (at least in some cases) going to produce shared objects).
# We do not want shared objects in these cases, since these are executables!

RS232EchoTest$(EXE): $(MYLIB) RS232EchoTest$(OBJ_SUFFIX)
	$(LINKER) $(FIRST_LINK_INFO) $(LINK_PREFIX)$@ RS232EchoTest$(OBJ_SUFFIX) $(SECOND_LINK_INFO)
	$(COPY)

RS232SendTest$(EXE): $(MYLIB) RS232SendTest$(OBJ_SUFFIX)
	$(LINKER) $(FIRST_LINK_INFO) $(LINK_PREFIX)$@ RS232SendTest$(OBJ_SUFFIX) $(SECOND_LINK_INFO)
	$(COPY)

TestLanguageClient$(EXE): $(MYLIB) TestClient$(OBJ_SUFFIX)
	$(LINKER) $(FIRST_LINK_INFO) $(LINK_PREFIX)$@ TestClient$(OBJ_SUFFIX) $(SECOND_LINK_INFO)
	$(COPY)

TestLanguage$(EXE): $(MYLIB) Test$(OBJ_SUFFIX)
	$(LINKER) $(FIRST_LINK_INFO) $(LINK_PREFIX)$@ Test$(OBJ_SUFFIX) $(SECOND_LINK_INFO)
	$(COPY)

TestLanguageServer$(EXE): $(MYLIB) TestServer$(OBJ_SUFFIX)
	$(LINKER) $(FIRST_LINK_INFO) $(LINK_PREFIX)$@ TestServer$(OBJ_SUFFIX) $(SECOND_LINK_INFO)
	$(COPY)

