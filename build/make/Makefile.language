SZG_INCLUDE_STYLE = INTERNAL
SZG_COPY_LIB = TRUE

VPATH = ../../../src/language
include $(SZGHOME)/build/make/Makefile.vars

OBJS = \
  arVersion$(OBJ_SUFFIX) \
  arRS232Port$(OBJ_SUFFIX) \
  arDatabaseLanguage$(OBJ_SUFFIX) \
  arDatabaseNode$(OBJ_SUFFIX) \
  arDatabase$(OBJ_SUFFIX) \
  arDataPoint$(OBJ_SUFFIX) \
  arDataClient$(OBJ_SUFFIX) \
  arDataServer$(OBJ_SUFFIX) \
  arDataTemplate$(OBJ_SUFFIX) \
  arDataUtilities$(OBJ_SUFFIX) \
  arLanguage$(OBJ_SUFFIX) \
  arLightFloatBuffer$(OBJ_SUFFIX) \
  arQueuedData$(OBJ_SUFFIX) \
  arSharedLib$(OBJ_SUFFIX) \
  arSocket$(OBJ_SUFFIX) \
  arStructuredDataParser$(OBJ_SUFFIX) \
  arStructuredData$(OBJ_SUFFIX) \
  arTemplateDictionary$(OBJ_SUFFIX) \
  arSocketTextStream$(OBJ_SUFFIX) \
  arFileTextStream$(OBJ_SUFFIX) \
  arXMLUtilities$(OBJ_SUFFIX) \
  arThread$(OBJ_SUFFIX) \
  arUDPSocket$(OBJ_SUFFIX) \
  arSocketAddress$(OBJ_SUFFIX) \
  arXMLParser$(OBJ_SUFFIX) \
  arLogStream$(OBJ_SUFFIX)

# Explicit definitions, replacing the otherwise generic ones in Makefile.defines

SZG_INCLUDE = $(SZG_DLL_INCLUDE)
SZG_LINK_LIBS = $(GENERAL_LIBS) $(SZG_DLL_LIB)
SZG_OPTIONAL_LIBS =
SZG_LIBRARY_LIBS =
SZG_CURRENT_LIB_SHORT_NAME = arLanguage
ifeq ($(strip $(MACHINE)),WIN32)
  COMPILE_FLAGS += -D "SZG_COMPILING_LANGUAGE"
endif

ALL = \
  $(SRCDIR)/arVersion.cpp \
  $(SZG_CURRENT_DLL) \
  RS232EchoTest$(EXE) \
  RS232SendTest$(EXE) \
  TestLanguageClient$(EXE) \
  TestLanguage$(EXE)  \
  TestLanguageServer$(EXE)

include $(SZGHOME)/build/make/Makefile.rules

# On Windows, compile the precompiled header FIRST.
$(SZG_CURRENT_DLL): arPrecompiled$(OBJ_SUFFIX) $(OBJS) $(SRCDIR)/arVersion.cpp
	$(LINK_SZG_LIB)
	$(COPY)

# Version info functions.
.PHONY: $(SRCDIR)/arVersion.cpp
$(SRCDIR)/arVersion.cpp: $(SRCDIR)/arVersionTemplate.cpp $(SRCDIR)/make_arVersion.py
	$(CP) $(SRCDIR)/arVersionTemplate.cpp $(SRCDIR)/arVersion.cpp
	-python $(SRCDIR)/make_arVersion.py $(SRCDIR)


# For stability, heavily optimize only the raw-information-handling objects.
# Old optimize-everything way:
#   COMPILE_FLAGS += $(OPTIMIZE_FLAG)
#   and omit any explict targets below.

arDataTemplate$(OBJ_SUFFIX): arDataTemplate.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arDataUtilities$(OBJ_SUFFIX): arDataUtilities.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arLightFloatBuffer$(OBJ_SUFFIX): arLightFloatBuffer.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arQueuedData$(OBJ_SUFFIX): arQueuedData.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

arStructuredData$(OBJ_SUFFIX): arStructuredData.cpp
	$(COMPILER) $(COMPILE_FLAGS) $(OPTIMIZE_FLAG) $< $(SZG_INCLUDE)

# Must override the standard obj compilation with a precompiled header
# specific one. note this does nothing meaningful on platforms besides windows
arPrecompiled$(OBJ_SUFFIX): arPrecompiled.cpp
	$(PRECOMPILED_HEADER_LINE)

RS232EchoTest$(EXE): $(SZG_CURRENT_DLL) RS232EchoTest$(OBJ_SUFFIX)
	$(SZG_EXE_FIRST) RS232EchoTest$(OBJ_SUFFIX) $(SZG_EXE_SECOND)
	$(COPY)

RS232SendTest$(EXE): $(SZG_CURRENT_DLL) RS232SendTest$(OBJ_SUFFIX)
	$(SZG_EXE_FIRST) RS232SendTest$(OBJ_SUFFIX) $(SZG_EXE_SECOND)
	$(COPY)

TestLanguageClient$(EXE): $(SZG_CURRENT_DLL) TestClient$(OBJ_SUFFIX)
	$(SZG_EXE_FIRST) TestClient$(OBJ_SUFFIX) $(SZG_EXE_SECOND)
	$(COPY)

TestLanguage$(EXE): $(SZG_CURRENT_DLL) Test$(OBJ_SUFFIX)
	$(SZG_EXE_FIRST) Test$(OBJ_SUFFIX) $(SZG_EXE_SECOND)
	$(COPY)

TestLanguageServer$(EXE): $(SZG_CURRENT_DLL) TestServer$(OBJ_SUFFIX)
	$(SZG_EXE_FIRST) TestServer$(OBJ_SUFFIX) $(SZG_EXE_SECOND)
	$(COPY)
