CP = cp

# suffixes
OBJ_SUFFIX = .o
DLL_SUFFIX=.dylib
LIB_SUFFIX=.dylib
PLUGIN_SUFFIX=.so
STATIC_SUFFIX=.a
EXE =

# compilation
COMPILER = c++
ifneq ($(strip $(uname -a | grep i386)), "")
  DARWIN_PROC_FLAG=-DAR_USE_INTEL_MAC
else
  DARWIN_PROC_FLAG=
endif
COMPILE_FLAGS_NDEBUG = $(DARWIN_PROC_FLAG) -DAR_USE_DARWIN $(SZG_OPT_FLAGS) \
  -fno-common -fPIC -O2 -c
COMPILE_FLAGS_DEBUG = $(DARWIN_PROC_FLAG) -DAR_USE_DARWIN $(SZG_OPT_FLAGS) \
  -fno-common -fPIC -c -g
ifneq ($(strip $(SZGDEBUG)),TRUE)
  COMPILE_FLAGS = $(COMPILE_FLAGS_NDEBUG)
else
  COMPILE_FLAGS = $(COMPILE_FLAGS_DEBUG)
endif

COMPILE_FLAGS_SHARED=$(COMPILE_FLAGS)

PRECOMPILED_HEADER_LINE := \
  $(CP) ../../../src/language/arPrecompiled.cpp arPrecompiled$(OBJ_SUFFIX)

ifneq ($(strip $(SZGDEBUG)),TRUE)
  OPTIMIZE_FLAG = -O3
else
  OPTIMIZE_FLAG = 
endif

# linking
LINKER = c++
STATIC_LINKER = ar -c -r
LINK_PREFIX =
LINK_FLAGS = -o
LINK_FLAGS_DEBUG = $(LINK_FLAGS)
LINK_FLAGS_SHARED = -dynamiclib -flat_namespace -undefined suppress -o
LINK_FLAGS_PLUGIN = -bundle -flat_namespace -undefined suppress -o

GENERAL_LIBS = -lm -lpthread -lcurses -lobjc
# Darwin OS X 10.4 needs Xcode 2.4.1 from Apple Developer Connection (752 MB).
# darwin (OS X 10.4) $(CURRENT_ARCH) resolves to "ppc" or "intel",
# so for example: LINK_FLAGS += $(OTHER_FLAGS_$(CURRENT_ARCH))

# darwin may use GCC_VERSION_IDENTIFIER

# warning: COCOA is deprecated in OS X 10.4

# Hack for 10.5 -- there are two libGL.dylib's, one in OpenGL.framework and one in /usr/X11R6/lib.
# We need the /usr/X11R6/lib version, but it in turn needs the native OpenGL.framework version,
# and both have the same basename (libGL.dylib).
# A MacOS 10.5 linker bug prevents finding the native one;
# using -dylib_file is a workaround, as described in
#  http://lists.apple.com/archives/X11-users/2007/Oct/msg00145.html
NATIVE_GL = /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib
GRAPHICS_LIBS = -L/usr/X11R6/lib -lGL -lX11 -lXext -dylib_file ${NATIVE_GL}:${NATIVE_GL} -framework OpenGL -framework GLUT -framework COCOA
GAMEPAD_LIBS = 

# OS X needs an outside library to support dlopen.
SZG_DLL_LIB = $(SZGHOME)/contrib/dlcompat/libdl.a
SZG_DLL_INCLUDE = -I$(SZGHOME)/contrib/dlcompat

# OS X needs to explicitly set the location of glx.h.  This is misnamed, but backwards-compatible.
##SZG_INCLUDE_GLUT = -I/usr/X11R6/include
SZG_INCLUDE_GLUT = -I/usr/X11R6/include -I/System/Library/Frameworks/GLUT.framework/Versions/A/Headers

# Since OS X allows relative runtime paths, don't bother setting
# DYLD_LIBRARY_PATH (the equivalent of LD_LIBRARY_PATH for Darwin)
ifeq ($(strip $(SZG_DEVELOPER_STYLE)),EASY)
  LIB_SEARCH_FLAGS=-L$(SZGHOME)/bin
else
  LIB_SEARCH_FLAGS=-L$(SZG_BINDIR)
endif

PRE_LINK_LINE_LIB= 
POST_LINK_LINE_LIB=$(LIB_SEARCH_FLAGS) $(SZG_LIBRARY_LIBS) \
  $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS) -install_name @executable_path/$(SZG_CURRENT_LIB)

PRE_LINK_LINE_EXE= 
POST_LINK_LINE_EXE= $(LIB_SEARCH_FLAGS) -l$(SZG_CURRENT_LIB_MOD_NAME) \
  $(SZG_LIBRARY_LIBS) $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)

PRE_LINK_LINE_USR= 
POST_LINK_LINE_USR= $(LIB_SEARCH_FLAGS) $(SZG_LIBRARY_LIBS) \
  $(SZG_OPTIONAL_LIBS) $(SZG_LINK_LIBS)

# Libs are referenced differently in windows and unix.
LANGUAGE_LIB_STRING = -larLanguage$(SZG_STATIC_MOD)
PHLEET_LIB_STRING = -larPhleet$(SZG_STATIC_MOD)
BARRIER_LIB_STRING = -larBarrier$(SZG_STATIC_MOD)
MATH_LIB_STRING = -larMath$(SZG_STATIC_MOD)
DRIVERS_LIB_STRING = -larDrivers$(SZG_STATIC_MOD)
GRAPHICS_LIB_STRING = -larGraphics$(SZG_STATIC_MOD)
SOUND_LIB_STRING = -larSound$(SZG_STATIC_MOD)
OBJECT_LIB_STRING = -larModel$(SZG_STATIC_MOD)
INTERACT_LIB_STRING = -larInteraction$(SZG_STATIC_MOD)
FRAMEWORK_LIB_STRING = -larFramework$(SZG_STATIC_MOD)

# Create static libraries.
# OS X needs to run ranlib on a newly linked .a, unlike other Unixes and Windows.
RANLIB = ranlib
