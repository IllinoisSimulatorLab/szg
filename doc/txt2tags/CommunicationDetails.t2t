Header1 Communication Details
Header2 %%mtime(%m/%d/%Y)

%!options: --headers --toc

Header3

%%toc


=How Components Connect to the szgserver=[Connect]

Syzygy programs can either operate in Phleet mode or
[standalone mode Standalone.html]. For some programs, such as
those that manipulate the Phleet, standalone mode, where the program operates
without connection to an szgserver, does not make sense. However, user
applications can often operate in a self-contained manner, and, consequently,
standalone mode makes sense for them. For instance, both Syzygy application
frameworks can operate in standalone mode.

 When a Phleet component starts, it
first reads the appropriate login file. This file specifies the szgserver to
use and has name szg_XXX.conf, where XXX is the user name according to the
host system. If this file does not exist or is in a dlogged-out state, the
program will operate in standalone mode, if it supports such. If the program
does not support standalone operation, it will exit, prompting the user to
dlogin in. On the other hand, if the login file indicates the user is logged
in to an szgserver, the embedded arSZGClient attempts to contact that
server (the IP address and port are contained in the file) and form a
connection. If the connection attempt fails, the program will attempt to
operate in standalone mode, failing if it does not support such.

As mentioned in this [section #PhleetConfiguration], the dlogin
command creates the Phleet login file, either via explicitly feeding the
command an IP address/port pair or by automatic discovery. The discovery
process is described now. First, the component broadcasts a call to szgservers
out on the LAN. All szgserver programs listen for UDP packets on port 4620 and
respond to discovery requests by broadcasting on the same port.
Requests and responses
are distinguished by a one byte flag in the packet, and both types are 200
bytes long. They have the following format:

```
  discovery packet (size 200 bytes)
   bytes 0-3: A version number. Allows us to reject incompatible packets.
   byte 4: Is this discovery or response? 0 for discovery, 1 for response.
   bytes 4-131: The requested server name, NULL-terminated string.
   bytes 132-199: All 0's
```

When an szgserver receives a discovery packet, it checks whether the
requested name is the wildcard character "*" or equals its own name. If so,
it returns a response packet.

```
  response packet (size 200 bytes)
   bytes 0-3: A version number. Allows us to reject incompatible packets.
   byte 4: Is this discovery or response? 0 for discovery 1 for response.
   bytes 5-131: Our name, NULL-terminated string.
   bytes 132-163: The interface upon which the remote whatnot should
    connect, NULL-terminated string.
   bytes 164-199: The port upon which the remote whatnot should connect,
    NULL-terminated string. (in fact, all trailing zeros)
```

The client waiting for a response will time out after 2 seconds.


=Automated Server Discovery=[Connect]

As mentioned in this [section #PhleetConfiguration], the dlogin
command creates the Phleet login file, either via explicitly feeding the
command an IP address/port pair or by automatic discovery. The discovery
process is described now. First, the component broadcasts a call to szgservers
out on the LAN. All szgserver programs listen for UDP packets on port 4620 and
respond to discovery requests by broadcasting on the same port.
Requests and responses
are distinguished by a one byte flag in the packet, and both types are 200
bytes long. They have the following format:

```
  discovery packet (size 200 bytes)
   bytes 0-3: A version number. Allows us to reject incompatible packets.
   byte 4: Is this discovery or response? 0 for discovery, 1 for response.
   bytes 4-131: The requested server name, NULL-terminated string.
   bytes 132-199: All 0's
```

When an szgserver receives a discovery packet, it checks whether the
requested name is the wildcard character "*" or equals its own name. If so,
it returns a response packet.
When ``szgserver`` starts up it uses the Phleet configuration file on the
local computer to determine the IP address it should use in its response to
client discovery requests. It picks the first IP address listed in the
configuration file. Consequently, the
user should make sure that this IP address is globally accessible via all
computers that will be part of the Phleet.


```
  response packet (size 200 bytes)
   bytes 0-3: A version number. Allows us to reject incompatible packets.
   byte 4: Is this discovery or response? 0 for discovery 1 for response.
   bytes 5-131: Our name, NULL-terminated string.
   bytes 132-163: The interface upon which the remote whatnot should
    connect, NULL-terminated string.
   bytes 164-199: The port upon which the remote whatnot should connect,
    NULL-terminated string. (in fact, all trailing zeros)
```

The timeout period during which the client will wait for a response is
2 seconds.


=How Do Clients Determine the Current User?=[User]

As the arSZGClient object initializes, it needs to determine the user. Many
communications with the szgserver are stamped with user name. Manipulations
of a parameter database (one of which exists for each user) clearly need this
information. Messages from one arSZGClient to another are also stamped with
user name, which allows, for instance, szgd daemons to execute programs in the
as the Phleet user making the remote execution request, instead of
the Phleet user who started the szgd program.

This is how the Syzygy program determines the Phleet user:

+ First, check to see if the environment variable SZGUSER is set. If so, then
   the value is the Phleet user name. When szgd executes a Syzygy program, it
   sets this variable to the Phleet user name associated with the execution
   request.

+ If not, determine the current user name as reported by the host system
   (which can be completely different from an Phleet user name). Use this
   user name to load a Phleet login file. If the host system user name is
   XXX, then the Phleet login file, on a unix system, will be
   /tmp/szg_XXX.conf. The Phleet user name is read from this file.


=How Clients Message Each Other (via szgserver)=[Message]

Components of the distributed system need to message each other from time to time.
For instance, the "dex" command sends a message to an szgd, which causes szgd to
launch the requested executable. Furthermore, a component can receive a "kill" or
a "reload" message, causing it to take appropriate action. Note that some messages
need to have responses to be meaningful. For instance, the "dex" command must be
able to report any trouble launching the requested executable and even information
from the executable's initialization.

For reliability, the right to respond to a message (that requires a response) must
be owned by a particular component. If that component drops out of the Phleet, the
szgserver can then easily notify the message-sending component that an error has
occured and that it will never receive a response. Unfortunately, this rule needs to
be somewhat bent to enable the "dex" command's right to respond to an execution
message to be passed on to the launched executable. In this case, szgd indicates to
the szgserver it wants to trade its right of message response to any Phleet
component making a trade request with an appropriate key. The launched executable is
able to make such a request, and thus is able to respond to the original launch
message.

We now outline the records in the Phleet protocol that pertain to messages.

```
    "SZG Message"
      int[]  "ID";      // the message's ID
      int[]  "Response"; // 0 if no response is desired, 1 if response is
                         / desired
      char[] "User";    // the user who sent the message.
      char[] "Type";    // the type of the message, like "quit", "reload", etc.
      char[] "Body";    // additional information
      char[] "Context"; // is this message being sent as part of the operation of a
                        // virtual computer
      int[]  "Destination"; // the Phleet ID of the message's destination
```

```
    "SZG Message Admin" // this is a catch-all record that serves several functions
      int[]  "ID";      // if the admin record is about a particular message, the
                        // ID is filled-in here
      char[] "Status";  // status code, "SZG_SUCCESS", "SZG_FAILURE", or
                        // "SZG_CONTINUE"
      char[] "Type";    // the command type. "SZG Response",
                        // "SZG Trade Message", "SZG Message Request", "SZG Revoke Trade"
      char[] "Body";    // additional information, if necessary
```

```
    "SZG Message Ack"   // used by the szgserver to acknowledge the various
                        // communications above
      int[]  "ID";      // used to inform the client of a particular message ID
      char[] "Status";  // status code, "SZG_SUCCESS" or "SZG_FAILURE"
```

We now examine the variations within the "SZG Message Admin" record, as
differentiated by the "Command" field.

"SZG Response": The response to the client's message. The "Status" field tells
whether or not this is valid (for instance, the Phleet component owning the right to
respond could have died, in which event, an "SZG Response" would be sent (by the
szgserver) with
"Status" set to "SZG_FAILURE". The "Body" field gives the text of the response.
The "ID" field gives the message ID for which this response is intended. Note that
components are allowed to send partial responses to messages (as may be desirable if the
full message response will take a very long time). In this case, the "Status" field
is set to "SZG_CONTINUE".

"SZG Trade Message": The "ID" field identifies the message of which we are trying
to relinquish ownership. The "Body" field gives the key upon which message trading
hinges.

"SZG Message Request": The "Body" field is the key with which the client requests
a new message.

We now construct various scenarios in the use of Phleet messaging.

Message sent, no response required: The simplest scenario. szgserver receives
the message, fills in the ID with the next available message ID, and routes it
to the component with the given destination ID. (note that upon receipt of the
message, the szgserver returns an "SZG Message Ack" containing the message's ID)
The component receiving the message then processes the
message using a callback registered with its arSZGClient. Nothing is ever registered
with the szgserver's internal data storage.

Message sent, response required: Upon receipt of the message, the szgserver fills
in the ID field with the next available message ID. Next, it returns an
"SZG Message Ack" record containing the message's ID.
In this way, the sending component can send several messages before getting a single
response and still be able to distinguish which response corresponds to which
message. The szgserver then registers the message ID
with the destination component. The destination component is now able to respond to
that message. The message is then routed to the destination.
If the destination component leaves the
Phleet before delivering its response, the szgserver sends a record as below to the
originating component:

```
    "SZG Message Admin"
      int[] {  };
      char[] {"SZG_FAILURE"};
      char[] {"SZG Response"};
      char[] {""};
```

Response sent: Upon receipt at the szgserver of the "SZG Message Admin" record
with type "SZG Response", the
szgserver sees if the component is allowed to respond to the message with the ID.
If so, it looks up the Phleet ID
of the component owing the message response (which might be different than the
component that actually sent the message in the first place). The response is sent to
this component. The next action depends on the content of the "Status" field. If this
field is set to "SZG_SUCCESS", the entry keyed to the message ID is removed from the table.
On the other hand, if the field is set to "SZG_CONTINUE", the message ID is not removed.
In either case, an "SZG Message Ack" is sent to
responding component, with status "SZG_SUCCESS". On the other hand, if the responding
component does not own the right to respond to the message, an "SZG Message Ack"
with status "SZG_FAILURE" is sent to the
responding component.

Message response ownership passed to a new component: The receiving component
may decide that it wishes to pass message response ownership to a new component.
The best example of this is with szgd wanting to pass ownership of the execution
message to the spawned process. The receiving component can send an "SZG Message Admin"
record with type "SZG Message Trade" to the szgserver in order to indicate
its willingness to relinquish right to
respond to a given message to a new component (as determined by a string key).
This key includes information about the user and the virtual computer.
For instance, if the component run by user "XXX" on host "YYY" and in the context
of virtual computer "cube" wants to
trade a message under the name "foo", the key will then be: "XXX/YYY/foo/cube". Note that
in the particular case of szgd, "foo" will be the name of the launched component.
The szgserver maintains a table mapping keys to the IDs of the
components which can respond to those messages. Each component furthermore has a map
associating keys it has posted with message IDs associated with them. These data
structures are now updated.
Next, the new component then sends an "SZG Message Admin" record with
type "SZG Message Request"
to the szgserver, asking for ownership of
the message with key "XXX/YYY/foo/cube" (as in the previous example). An
"SZG Message Ack" record is sent back to the
new component. The "Status" field indicates whether it has received ownership of the
message. If so, the "ID" field indicates the ID of the original sending component. Also,
in this case, a "SZG Message Ack" record is returned
to the original receiving component. The global szgserver and component-specific data
structures mentioned above are suitably updated. 


=The Operation of Locks in Phleet=[Lock]

Phleet needs locking mechanisms for normal operation. An example of the need for
OS-level locks is found in the launching of an application, which needs to be atomic,
even though it may involve significant operations on components in the distributed
system. Locks can be implemented, in a primitive way, by using database variables,
since there is support for atomic test-and-set. However, this method is insufficient.
Locks should be owned by components so that they are released on that component's
removal from the distributed system.

Consequently, Phleet maintains a lock table. Each lock is named. The name is a key
to the lock table, in which is stored the ID of the component owning the lock. When
a component sends an "SZG Lock Request" to the szgserver, the szgserver checks to
see if another component owns the lock. If so, it sends the originating component a
response (an "SZG Lock Resonse" record) indicating that another component owns the
lock, and giving that component's ID. If not, it sends the originating component a
message indicating that it now owns the lock. Appropriate modifications are made to
the lock table plus the component's data structure that records the resources it owns.
Specifically, each component maintains a list of locks it owns. When the component
leaves the Phleet, these are removed from the global list of held locks.

When the component wants to release a lock it owns, it sends an "SZG Lock Release"
to the szgserver. The szgserver checks to see if the sending component does, in fact,
own the lock. If so, it releases it and sends an "SZG Lock Response" back with
"Status" field set to "SZG_SUCCESS". Otherwise, the lock remains unreleased and the
szgserver returns an "SZG Lock Response" with "Status" field set to "SZG_FAILURE".

IMPORTANT NOTE: There is currently no way to *wait* until a lock can be grabbed
by the requesting component. A feature to be added (i.e. in some situations it might be
nice to have a getLock(...) call that blocks until the lock is available, which is
the usual semantics of pthreads locks. However, this functionality is not needed for
cluster application launching, so it is put off for a future realease.

```
    "SZG Lock Request"
      char[] "Name"; // the name of the lock we are requesting
```

```
    "SZG Lock Release"
      char[] "Name"; // the name of the lock to be released
```

```
    "SZG Lock Response"
      char[] "Name";      // the name of the lock that was requested
      char[] "Status";    // "SZG_SUCCESS" if the lock has been gotten
                          // "SZG_FAILURE" if not gotten
      int[]  "Owner";     // the Phleet ID of the component owning the lock currently
                          // -1 if no component owns it.
```

```
    "SZG Lock Listing"
      char[] "Locks";      // a slash-delimited list of the locks names in the system
      char[] "Computers";  // a slash-delimited list of the computers holding those locks
      int[]  "Components"; // an array containing the IDs of those components
```

```
    "SZG Lock Notification"
      char[] "Name";   // upon the release of this named lock, we wish to be notified
```


Note that this scheme also handles Phleet resource reservation. A
component can hold a lock on a particular resource in a virtual computer
(like a graphics screen). If a new component wants that resource, it can
try to get the lock. On failure, it learns of the ID of the component holding the
lock. A kill message can then be sent to that component to free the resource.


=Connection Brokering in Phleet=[Brokering]

In previous Syzygy versions, components offering services did so on IPs/ports fixed by
parameters stored in the szgserver's database, as did components requesting services.
This is inadequate in several ways. First, it fixes connections based on the computers
on which components run, implying that a component running on computer A will always
connect to another component running on computer B. Second, this was
the only information in
the parameter databases used with previous syzygy versions that could not be given
sensible defaults, consequently increasing set-up complexity. Third, it introduces a
common source of errors: why won't component A connect to component B?

Syzygy now uses the szgserver as a connection broker. Roughly speaking, when a
component becomes available as a data source, it registers itself with the szgserver,
using a tag. The szgserver responds with a port on which it can listen for connection
requests. All internet-based Syzygy services now bind to INADDR_ANY. This increases
flexibility as, often, a service providing component will want to drive components
on multiple IP networks. The client chooses the network on which the connection occurs.
When a client wants to establish a connection to a Syzygy service, it contacts the
szgserver with the tag describing the service to which it wants to connect. If the
tag exists in the szgserver's internal store, the server returns network(s) and a port
number of which the service is accessible. The client can then connect directly to the
service via a network of its choice. In detail:

Here are the record types in the Phleet protocol used to deal with connection
brokering.

```
    "SZG Register Service"
      int[]  "Match"      // arequest ID generated by the arSZGClient and echoed by
                          // responses from the szgserver. Used to allow services
                          // to register themselves in mutliple threads.
      char[] "Status";    // SZG_SUCCESS, SZG_FAILURE, or SZG_RETRY
      char[] "Tag";       // a string indicating the service's identity
      char[] "Networks";  // a slash-delimited string listing human-readable identifiers
                          // for the various networks on the originating box
      char[] "Addresses"; // a slash-delimited string listing the addresses of the
                          // computer's interfaces on the above communications networks,
                          // in the same order as the networks themselves appear
      int[]  "Size";      // some services may require a block of ports upon which
                          // to operate, this indicates the number of ports required
      char[] "Computer";  // the name of the computer on which the service will run
      int[]  "Block";     // a pair of numbers indicating the starting port and the size
                          // of the port block as defined in szg.conf. This can change
                          // over time, so each record attempting to register a service
                          // contains it
      int[]  "Port";      // in the case of SZG_RETRY, we are letting the szgserver
                          // know we were unable to bind to a port in this array
```

```
    "SZG Request Service"
      char[] "Computer";  // the computer on which the service request occurred
      int[]  "Match";     // a request ID generated by the arSZGClient and echoed by
                          // responses from the szgserver. Used to allow service
                          // requests from multiple threads.
      char[] "Tag";       // a string indicating the identity of the requested service
      char[] "Networks";  // a slash-delimited string listing human-readable identifiers
                          // for the various networks on which the client can communicate
      char[] "Async";     // either SZG_TRUE or SZG_FALSE. If SZG_FALSE, the szgserver
                          // will immediately respond with a failure message if the
                          // requested service has yet to be registered. If SZG_TRUE,
                          // the response will wait until registration has occured.
```

```
    "SZG Broker Result"
      int[]  "Match";     // Allows the response to be routed to the right thread.
      char[] "Status";    // SZG_SUCCESS or SZG_FAILURE
      char[] "Address";   // If this responds to an "SZG Request Source" record and
                          // the "Status" field is SZG_SUCCESS, then this will be the
                          // address to which it should connect to the service
      int[]  "Port";      // This can either be the array of ports assigned by the
                          // szgserver to the service or the array of ports to which the
                          // client will connect, depending on whether this is a
                          // response to "SZG Register Source" or "SZG Request Source"
```

```
    "SZG Get Services"
      char[] "Services";   // Returns a semi-colon delimited list of the running services
                           // managed by this szgserver (or conversely the pending service
                           // requests). note that the list must be
                           // semi-colon delimited since service names may contain slashes
      char[] "Type";       // Are we asking for registered services or requests for a
                           // service that have yet to be fulfilled?
      char[] "Computers";  // Returns a slash-delimited list giving the computers on which
                           // the services are running (or, conversely the computers on
                           // which the components requesting the services are running)
      int[]  "Components"; // the IDs of the components offering the services (or
                           // conversely the IDs of the components whose service requests
                           // have yet to be fulfilled).
```

```
    "SZG Service Release"
      char[] "Name";      
      char[] "Computer";
```

There are two commands relating to services. It allows the user to see a listing of
all services currently offered.

```
    dservices
      Prints a listing of all services currently offered. This command works by sending
      the szgserver an "SZG Get Services" record with a blank "Services" field, receiving
      in return an "SZG Get Services" record with a "Services" field filled with a
      semi-colon delimited list of service names that are currently posted to this
      szgserver.
```

```
    dpending
      Prints a listing of all service requests that have been posted, but not yet
      fulfilled.
```

A description of the way a component can register its service follows.

+ A component has a service type, such as SZG_GEOMETRY, SZG_SOUND,
SZG_INPUT0, SZG_INPUT1, etc.
Master/slave applications have a service type given by their name (after all,
different master/slave apps form unique service classes). The tag with which the
service is registered depends on the method via which the service was launched.
For instance, if an SZG_GEOMETRY service is launched in the context of virtual computer
cube, the tag will be NULL/SZG_GEOMETRY/cube. On the other hand, if the same service is
launched by user foo, but not on a virtual computer, the tag will be
foo/SZG_GEOMETRY/NULL.

+ The component sends an "SZG Register Source" record to the szgserver, with "Tag" field
containing the tag determined in the previous step and with "Status" field set to
"Try". The "Networks" field contains a slash delimited list of the interfaces available
to the computer For instance, if the computer is connected to the internet and the cube
private network, The "Networks" field will be set to "internet/cube". The
"Addresses" field will contain field will contain a slash-delimited list of the
IP addresses of
the computer's several interfaces, in the same order as their descriptive names.
Since multiple private networks in an installation can contain the same IP addresses,
the network names cannot be infered from the IP addresses. The "Size" field
indicates the number of ports required for the service. Some services, like SZG_GEOMETRY
and SZG_SOUND, require more than one port. Finally, two fields contain configuration
information about the computer on which the component resides. The "Computer" field
gives its name, which is important since the various lists of ports outlined below are
stored on a per-computer basis. The "Block" field defines the port range the computer
has reserved for syzygy services. Note that this port range can, in fact, change.
Mechanisms for dealing with such are outlined below.

+ Upon receipt, the szgserver checks to see if
there is another component already offering this service. If so, an "SZG Broker Result"
record is returned, with the "Status" field marked "SZG_FAILURE".

+ If not, the szgserver checks to see if the block of ports given in the
"SZG Register Source" record is the same as a previously stored block, if any. If no
block of ports has been previously stored (i.e. this is the first time in the szgserver's
lifetime that a component has tried to register a service from that computer), the
various ports lists (available, temporary, and used) are initialized for that computer.
If a block of ports has already been defined for that computer and the new block is the
same (the common case), we do nothing. On the other hand, if the block of ports defined
in the "SZG Register Source" record is different than that already reserved, action needs
to be taken. The old available ports list is removed, and is replaced with the new block,
minus those ports which already appear on the temporary or used lists for the computer
in question (the lists can in fact overlap).

+ Now that the szgserver has adjusted its various ports lists, it checks
its list of ports available for use on the computer on which the component is
running. It picks the first ports on the list (up to the number of ports requested),
marks the "Status" field as "SZG_SUCCESS",  and
stores the port number(s) in the "Port" field, returning the "SZG Broker Result" record
to the requesting component. The port number(s) are then removed from the available list
and are placed on the temporary list (but not yet on the used list) associated with that
computer. The tag is placed on the list of temporary tags.

+ The component now receives the port number(s) and attempts to bind listening sockets
to them, as appropriate, using INADDR_ANY.
Please note that the socket option for reusing addresses
is set to false. Consequently, if a server is not shut down cleanly, it will be a few
seconds before a new server can bind to that port. It may thus be
possible that the bind can fail, especially if some of the port range specified for the
syzygy components on the given computer overlaps with active servers corresponding to
other types of software.

+ If any of the binds fail, the component sends a new "SZG Register Source"
record to the szgserver. This time, the "Status" field is set to "Retry" and the
offending port number(s) are included in the "Port" field.
The szgserver then moves the port
number(s) from the temporary list to the end of the available list, after making sure
that the component sending the record does, in fact, own the ports in question.
Recall that the port(s)
might just be temporarily unavailable, and, since the port list ideally contains 100 or
200 entries, it will not be tried again for a significant amount of time. The szgserver
then sends a new "SZG Broker Result", as above. To avoid a potential infinite loop,
the number of retries is arbitrarily limited to 10, which should be sufficient given
a port list of size comparable to that mentioned above.

+ If the bind succeeds, the component sends an "SZG Register Source" record back
to the server with "Status" field set to "SZG_SUCCESS" and the "Port" field containing the
IDs of
the used port(s). The szgserver then removes the port number(s) from the temporary list and
transfers them to the used list, making sure that the component in question does in fact
own those ports. The tag is then removed from the temporary tag list
and placed on the used tag list.

- Note: in addition to global temporary and used lists, the szgserver maintains these
lists on a per component basis (along with the computer name where the component is
running), keyed on the component's ID. This allows the szgserver
to automatically return these ports to the available list when a component
exits if they are still within the computer's designated ports block.
The same hold true for
tags, though in this case it is unecessary to include computer name, since, unlike port
numbers, the tags are globally unique.


A description of the way a component connects to a registered data source follows.

+ The component forms a service tag as above. It then sends an "SZG Request Source"
with the "Tag" field containing the tag, the "Networks" field containing a slash-delimited
string of possible networks, with the prefered network listed first.

+ The component blocks until a response occurs from the szgserver. This is OK since
all of szg's connection attempts occur in seperate connection threads.

+ When the szgserver receives an "SZG Request Source" record, it first checks to see
if there is a matching tag which has succeeded in registering itself. If not, it saves
the request in a pending connection queue.

+ On the other hand, if a matching tag has succeeded in registering itself, the
"Networks" field of the "SZG Request Source" record is compared with the networks
associated with the tag, and the best match, if any, is found. An "SZG Broker Result"
record will be returned to the requesting component. If no network match was found,
the "Status" field will be set to "SZG_FAILURE", otherwise it will be set to "SZG_SUCCESS".
The "Port" field contains the port number(s) and the "Address" field contains the
IP address of the server. When the client receives this, it issue a connect call on the
the given IP/port pair(s).

+ As data sources are successfully registered, they check the pending connection queue,
responding to each matching tag, as above (and removing them from the pending connection
queue).

+ The pending connection queue, is maintained on a per-component basis, in addition
to being maintained globally, so that, when a component leaves the system, its
pending connections can be removed from the system.



