Syzygy 1.0 Documentation: Table of Contents
Integrated Systems Lab
%%mtime(%m/%d/%Y)
%!options: --headers
%!encoding: iso-8859-1
%@+leo-ver=4-thin
%@+node:JimCrowell.20060110161328:@thin index.t2t
%@@first
%@@first
%@@first
%@@first
%@@first


[Syzygy Homepage http://www.isl.uiuc.edu/syzygy.htm]

[Using this Documentation UsingDocs.html]


=Getting Started=[GettingStarted]

- [GettingSoftware.html GettingSoftware.html] explains how to download and compile the source code.
  If you're on Windows and using Microsoft Visual C++, you'll also need to look at
  [VisualStudioBuildVars.html VisualStudioBuildVars.html]. Note that most of Syzygy can now be compiled
  on Windows using the [MinGW http://www.mingw.org/] GNU compiler; the exceptions are the input device
  driver plugins and the Python bindings, which still require a Microsoft compiler. Hopefully you'll
  be able to download precompiled copies of these from the same place where you got this archive...
- [SupportingLibraries.html SupportingLibraries.html] covers installing and using supporting
  libraries that give Syzygy extra functionality.
- [Standalone.html Standalone.html] Standalone mode: Running Syzygy programs on a single PC
  without setting up a cluster.
- [ExampleCode.html ExampleCode.html]: How to run the included example programs, where their
  data files should be installed, etc.
- [TrackingSim.html TrackingSim.html]: Using Syzygy's tracking and input device simulator
  (//inputsimulator//) to control a program in the absence of a tracked input device
  (this is currently required in standalone mode).
- [SystemConfiguration.html SystemConfiguration.html] describes interacting with the Syzygy Database
  to specify parameters of your virtual reality system in both Standalone and Cluster modes. This
  includes the following further topics:
  - [GraphicsConfiguration.html GraphicsConfiguration.html]: How to specify the arrangement of your
    display devices. Some examples are contained in
    [GraphicsConfigExamples.html GraphicsConfigExamples.html].
  - [PathConfiguration.html PathConfiguration.html] shows how to set up search paths for sound files,
    texture images, and so on.
  - When running in [cluster mode #ClusterSetup], the information on configuring input devices is also
    relevant, as is the information on configuring virtual computers.
    See [Setting Up, Testing, and Managing a Syzygy Cluster #ClusterSetup], below.


=Creating Your Own Syzygy Progams=

- [Programming.html Programming.html]: Writing a program using Syzygy's application frameworks.
- [QuickPort.html QuickPort.html]: Porting an OpenGL/GLUT-based application, in a hurry.
- [CompileCPP.html CompileCPP.html]: How to build Syzygy C++ programs.
- [PySZG.html PySZG.html]: How to write Syzygy Python programs.
- [SceneGraph.html SceneGraph.html]: Using the distributed scene graph API.
- [Sound.html Sound.html]: Using the sound system to produce spatially-localized sound.
- [Objects.html Objects.html]: Using external meshes (.obj or .3ds) and animations in Syzygy.
- [Navigation.html Navigation.html]: How to use built-in functions for navigation in your application.
- [Interaction.html Interaction.html]: How to use built-in classes and functions for picking,
  grabbing, and otherwise interacting with virtual objects.
- [PortabilityLayer.html PortabilityLayer.html]: The portability layer consists of classes and
  functions that wrap platform-specific implementations of sockets, serial ports, time, threads,
  mutexes, etc.
- [SceneGraphTutorial.html SceneGraphTutorial.html]: Shows how to manipulate Syzygy scene graphs
  from a Python prompt. A good starting point for writing Python programs based on the
  distributed scene graph framework. See also [SceneGraph.html SceneGraph.html].
- [RandomNumbers.html RandomNumbers.html] describes facilities of the master/slave application
  framework (described in [Programming.html Programming.html]) for generating shared sequences
  of pseudo-random numbers in all running instances of an application. Not tested much.


=Setting Up, Testing, and Managing a Syzygy Cluster=[ClusterSetup]

- [DistributedOS.html DistributedOS.html]: Concepts and commands for setting up Syzygy
  PC clusters and running programs on them (Look here and in
  [Configuring Virtual Computers VirtCompConfiguration]
  for an explanation of virtual computers).
- [ClusterTest.html ClusterTest.html]: Basic testing of your Syzygy cluster.
- [InputDevices.html InputDevices.html] describes the use of  the input device infrastructure in
  Cluster Mode.
- [InputDevices-Drivers.html InputDevices-Drivers.html] lists the supported input devices.
- [InputDeviceConfiguration.html InputDeviceConfiguration.html] explains how to configure input
  devices.
- [PForth.html PForth.html] introduces the PForth ("Pseudo-FORTH") input-filtering language.
  It's a stack-based language very similar to FORTH; it's designed for applying simple
  transformations to streams of input events (e.g. re-mapping input device button indices).
- [AppFeatures.html AppFeatures.html]: A few pet tricks for managing Cluster Mode applications
  using the 'dmsg' command.


=Miscellaneous=

- [szgview.html szgview.html]: szgview is a viewer for supported file formats.
- [SyzygyEnvironmentVariables.html SyzygyEnvironmentVariables.html]: A complete listing of environment
  variables either affecting or affected by Syzygy operation.


=Advanced Topics=

- [SharedWorldTutorial.html SharedWorldTutorial.html] shows how to use the //experimental// extensions
  to the Syzygy distributed scene graph that allow peer-to-peer sharing of scene graphs between
  clusters.
- [InputClasses.html InputClasses.html] contains some esoteric information about the code
  objects that handle input data.
- [InputFilters.html InputFilters.html] briefly describes how to write an input-event filter in C++.
  For most purposes it's more convenient to write such filters in the [PForth PForth.html] language.


=Background Information=

- [Architecture.html Architecture.html]: Overall design of Syzygy.
- [Goals.html Goals.html]: Our goals for Syzygy.
- [Future.html Future.html]: Where the software is going; what's likely to get changed.
- [ChangeLog.html ChangeLog.html]: A record of the changes between versions, since the beginning.
- [Testing.html Testing.html]: Tested configurations and testing procedures.
- [Bugs.html Bugs.html]: Known bugs, problems, and issues with the current version.


%@-node:JimCrowell.20060110161328:@thin index.t2t
%@-leo
