import os
import sys

Import('buildFunc','srcDirname','buildEnv','pathDict','priorLibs','externalFlags')


libSrc = ( \
    'arDeviceServerFramework.cpp',
    'arDeviceClient.cpp',
    'arInputNodeConfig.cpp',
    'arInputFactory.cpp',
    'arEventUtilities.cpp',
    'arFileSink.cpp',
    'arFileSource.cpp',
    'arGenericDriver.cpp',
    'arIOFilter.cpp',
    'arInputEvent.cpp',
    'arInputEventQueue.cpp',
    'arInputLanguage.cpp',
    'arInputNode.cpp',
    'arInputSource.cpp',
    'arInputState.cpp',
    'arNetInputSink.cpp',
    'arNetInputSource.cpp',
    'arPForth.cpp',
    'arPForthDatabaseVocabulary.cpp',
    'arPForthEventVocabulary.cpp',
    'arPForthFilter.cpp',
    'arPForthStandardVocabulary.cpp'
  )

progNames = (
    'DeviceServer',
    'DeviceClient',
    'EventTest',
    'FaroTest',
    'PForthTest',
    'pfconsole'
    )

pluginSrc = (
    'arJoystickDriver.cpp',
    'arSerialSwitchDriver.cpp',
    'arFOBDriver.cpp',
    'arFaroDriver.cpp',
    'arLogitechDriver.cpp',
    'arMotionstarDriver.cpp',
    'arPPTDriver.cpp',
    'arReactionTimerDriver.cpp',
    'arSharedMemDriver.cpp',
    'arSharedMemSinkDriver.cpp',
    'arUSBDriver.cpp',
    'arVRPNDriver.cpp',
    'arParallelSwitchDriver.cpp'
  )    

# Unsupported drivers (with MinGW):
#    'ar5DTGloveDriver.cpp',

szgHome = os.path.dirname( os.path.dirname( os.path.dirname( os.getcwd() ) ) )


# Call the generic directory-builder function
progEnv = buildFunc( srcDirname, buildEnv, libSrc, progNames, priorLibs, pathDict )


# Create a new environment for building plugins.
pluginEnv = progEnv.Clone()
if sys.platform == 'win32':
  pluginEnv['no_import_lib'] = True
  # We'd like to be able to suppress creation of .def files for 
  # driver plugins, but a bug in SCons causes the dll's to be
  # re-linked every time if we do this.
  #pluginEnv['WINDOWS_INSERT_DEF'] = False
  #
  # For now, in order to get things to work properly, we have to tell
  # SCons to generate a .def file for the driver plugins, even though
  # we don't need it, because otherwise a bug in SCons causes the
  # plugins to be re-linked whether needed or not.
  pluginEnv['WINDOWS_INSERT_DEF'] = True
elif 'linux' in sys.platform:
  # By default on linux, scons (at least version 1.2) assumes
  # that you want to prepend 'lib' to all your shared library
  # names. We don't want that for the _szg python extension.
  pluginEnv['SHLIBPREFIX'] = ''


# Build all the 'normal' driver plugins.
# Each call to SharedLibrary() returns a (.dll,.a,.def) tuple.
pluginStuff = [pluginEnv.SharedLibrary( s ) for s in pluginSrc]

# Intersense doesn't require external dependencies during build
# but does have a second source file.
isensePlugin = pluginEnv.SharedLibrary( ['arIntersenseDriver.cpp','isense.cpp'] )
pluginStuff.append( isensePlugin )

# Grab the .dll file from each result.
plugins = [p[0] for p in pluginStuff]


# Driver plugins with external dependencies (determined
# by scripts called from szg/build/scons/<platform>/SConscript).

def specialPlugin( name, src ):
  plugEnv = pluginEnv.Clone()
  if not plugEnv.GetOption('clean'):
    plugEnv.MergeFlags( externalFlags[name] )
  pluginStuff = plugEnv.SharedLibrary( src )
  Depends( pluginStuff, priorLibs )
  plugins.append( pluginStuff[0] )

for name, src in (( 'bird', 'arBirdWinDriver.cpp' ), \
    ( 'wii', 'arWiimoteDriver.cpp' ), \
    ( 'evart', 'arEVaRTDriver.cpp' ), \
    ( '5DT', 'ar5DTGloveDriver.cpp' )):
  if externalFlags.get( name, None ):
    specialPlugin( name, src )


# Copy driver plugins to SZGBIN
pluginEnv.Install( pathDict['binPath'], plugins )
